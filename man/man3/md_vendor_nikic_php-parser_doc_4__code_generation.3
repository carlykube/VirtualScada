.TH "md_vendor_nikic_php-parser_doc_4__code_generation" 3 "Tue Apr 14 2015" "Version 1.0" "VirtualSCADA" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_vendor_nikic_php-parser_doc_4__code_generation \- Code generation 
It is also possible to generate code using the parser, by first creating an Abstract Syntax Tree and then using the pretty printer to convert it to \fBPHP\fP code\&. To simplify code generation, the project comes with builders which allow creating node trees using a fluid interface, instead of instantiating all nodes manually\&. Builders are available for the following syntactic elements:
.PP
.IP "\(bu" 2
namespaces and use statements
.IP "\(bu" 2
classes, interfaces and traits
.IP "\(bu" 2
methods, functions and parameters
.IP "\(bu" 2
properties
.PP
.PP
Here is an example:
.PP
```php <?php $factory = new \fBPhpParser\fP; $node = $factory->namespace('Name') ->addStmt($factory->use('Some')->as('SomeOtherClass')) ->addStmt($factory->class('\fBSomeClass\fP') ->extend('SomeOtherClass') ->implement('\fBA\fP', '') ->makeAbstract() // ->makeFinal()
.PP
->addStmt($factory->method('someMethod') ->makePublic() ->makeAbstract() // ->makeFinal() ->addParam($factory->param('someParam')->setTypeHint('\fBSomeClass\fP')) ->setDocComment('/**
.IP "\(bu" 2
This method does something\&.
.IP "\(bu" 2

.IP "\(bu" 2
\fBParameters:\fP
.RS 4
\fI\fBSomeClass\fP\fP And takes a parameter */') )
.RE
.PP
->addStmt($factory->method('anotherMethod') ->makeProtected() // ->makePublic() [default], ->makePrivate() ->addParam($factory->param('someParam')->setDefault('test')) // it is possible to add manually created nodes ->addStmt(new \fBPhpParser\fP(new \fBPhpParser\fP('someParam'))) )
.PP
.PP
// properties will be correctly reordered above the methods ->addStmt($factory->property('someProperty')->makeProtected()) ->addStmt($factory->property('anotherProperty')->makePrivate()->setDefault(array(1, 2, 3))) )
.PP
->getNode() ;
.PP
$stmts = array($node); $prettyPrinter = new \fBPhpParser\fP(); echo $prettyPrinter->prettyPrintFile($stmts); ```
.PP
This will produce the following output with the standard pretty printer:
.PP
```php <?php
.PP
namespace Name;
.PP
use Some as \fBSomeClass\fP; abstract class \fBSomeClass\fP extends SomeOtherClass implements \fBA\fP,  { protected $someProperty; private $anotherProperty = array(1, 2, 3); /**
.IP "\(bu" 2
This method does something\&.
.IP "\(bu" 2

.IP "\(bu" 2
\fBParameters:\fP
.RS 4
\fI\fBSomeClass\fP\fP And takes a parameter */ public abstract function someMethod(\fBSomeClass\fP $someParam); protected function anotherMethod($someParam = 'test') { print $someParam; } } ``` 
.RE
.PP

.PP

