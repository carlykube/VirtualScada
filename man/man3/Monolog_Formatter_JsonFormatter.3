.TH "JsonFormatter" 3 "Tue Apr 14 2015" "Version 1.0" "VirtualSCADA" \" -*- nroff -*-
.ad l
.nh
.SH NAME
JsonFormatter \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBFormatterInterface\fP\&.
.PP
Inherited by \fBLogglyFormatter\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB__construct\fP ($batchMode=self::BATCH_MODE_JSON, $appendNewline=true)"
.br
.ti -1c
.RI "\fBgetBatchMode\fP ()"
.br
.ti -1c
.RI "\fBisAppendingNewlines\fP ()"
.br
.ti -1c
.RI "\fBformat\fP (array $record)"
.br
.ti -1c
.RI "\fBformatBatch\fP (array $records)"
.br
.in -1c
.SS "Data Fields"

.in +1c
.ti -1c
.RI "const \fBBATCH_MODE_JSON\fP = 1"
.br
.ti -1c
.RI "const \fBBATCH_MODE_NEWLINES\fP = 2"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBformatBatchJson\fP (array $records)"
.br
.ti -1c
.RI "\fBformatBatchNewlines\fP (array $records)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fB$batchMode\fP"
.br
.ti -1c
.RI "\fB$appendNewline\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Encodes whatever record data is passed to it as json
.PP
This can be useful to log to databases or remote APIs
.PP
\fBAuthor:\fP
.RS 4
Jordi Boggiano j.boggiano@seld.be 
.RE
.PP

.PP
Definition at line 21 of file JsonFormatter\&.php\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "__construct ( $batchMode = \fCself::BATCH_MODE_JSON\fP,  $appendNewline = \fCtrue\fP)"

.PP
\fBParameters:\fP
.RS 4
\fI$batchMode\fP 
.RE
.PP

.PP
Definition at line 32 of file JsonFormatter\&.php\&.
.SH "Member Function Documentation"
.PP 
.SS "format (array $record)"
{} 
.PP
Implements \fBFormatterInterface\fP\&.
.PP
Definition at line 65 of file JsonFormatter\&.php\&.
.SS "formatBatch (array $records)"
{} 
.PP
Implements \fBFormatterInterface\fP\&.
.PP
Definition at line 73 of file JsonFormatter\&.php\&.
.SS "formatBatchJson (array $records)\fC [protected]\fP"
Return a JSON-encoded array of records\&.
.PP
\fBParameters:\fP
.RS 4
\fI$records\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
string 
.RE
.PP

.PP
Definition at line 91 of file JsonFormatter\&.php\&.
.SS "formatBatchNewlines (array $records)\fC [protected]\fP"
Use new lines to separate records instead of a JSON-encoded array\&.
.PP
\fBParameters:\fP
.RS 4
\fI$records\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
string 
.RE
.PP

.PP
Definition at line 103 of file JsonFormatter\&.php\&.
.SS "getBatchMode ()"
The batch mode option configures the formatting style for multiple records\&. By default, multiple records will be formatted as a JSON-encoded array\&. However, for compatibility with some API endpoints, alternative styles are available\&.
.PP
\fBReturns:\fP
.RS 4
int 
.RE
.PP

.PP
Definition at line 47 of file JsonFormatter\&.php\&.
.SS "isAppendingNewlines ()"
True if newlines are appended to every formatted record
.PP
\fBReturns:\fP
.RS 4
bool 
.RE
.PP

.PP
Definition at line 57 of file JsonFormatter\&.php\&.
.SH "Field Documentation"
.PP 
.SS "$appendNewline\fC [protected]\fP"

.PP
Definition at line 27 of file JsonFormatter\&.php\&.
.SS "$batchMode\fC [protected]\fP"

.PP
Definition at line 26 of file JsonFormatter\&.php\&.
.SS "const BATCH_MODE_JSON = 1"

.PP
Definition at line 23 of file JsonFormatter\&.php\&.
.SS "const BATCH_MODE_NEWLINES = 2"

.PP
Definition at line 24 of file JsonFormatter\&.php\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for VirtualSCADA from the source code\&.
