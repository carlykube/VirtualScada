.TH "Container" 3 "Tue Apr 14 2015" "Version 1.0" "VirtualSCADA" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Container \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBContainer\fP, \fBContainer\fP, \fBApplication\fP, and \fBApplication\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBbound\fP ($abstract)"
.br
.ti -1c
.RI "\fBalias\fP ($abstract, $alias)"
.br
.ti -1c
.RI "\fBtag\fP ($abstracts, $tags)"
.br
.ti -1c
.RI "\fBtagged\fP ($\fBtag\fP)"
.br
.ti -1c
.RI "\fBbind\fP ($abstract, $concrete=null, $shared=false)"
.br
.ti -1c
.RI "\fBbindIf\fP ($abstract, $concrete=null, $shared=false)"
.br
.ti -1c
.RI "\fBsingleton\fP ($abstract, $concrete=null)"
.br
.ti -1c
.RI "\fBextend\fP ($abstract, Closure $closure)"
.br
.ti -1c
.RI "\fBinstance\fP ($abstract, $instance)"
.br
.ti -1c
.RI "\fBwhen\fP ($concrete)"
.br
.ti -1c
.RI "\fBmake\fP ($abstract, $parameters=array())"
.br
.ti -1c
.RI "\fBcall\fP ($\fBcallback\fP, array $parameters=array(), $defaultMethod=null)"
.br
.ti -1c
.RI "\fBresolved\fP ($abstract)"
.br
.ti -1c
.RI "\fBresolving\fP ($abstract, Closure $\fBcallback\fP=null)"
.br
.ti -1c
.RI "\fBafterResolving\fP ($abstract, Closure $\fBcallback\fP=null)"
.br
.ti -1c
.RI "\fBbound\fP ($abstract)"
.br
.ti -1c
.RI "\fBalias\fP ($abstract, $alias)"
.br
.ti -1c
.RI "\fBtag\fP ($abstracts, $tags)"
.br
.ti -1c
.RI "\fBtagged\fP ($\fBtag\fP)"
.br
.ti -1c
.RI "\fBbind\fP ($abstract, $concrete=null, $shared=false)"
.br
.ti -1c
.RI "\fBbindIf\fP ($abstract, $concrete=null, $shared=false)"
.br
.ti -1c
.RI "\fBsingleton\fP ($abstract, $concrete=null)"
.br
.ti -1c
.RI "\fBextend\fP ($abstract, Closure $closure)"
.br
.ti -1c
.RI "\fBinstance\fP ($abstract, $instance)"
.br
.ti -1c
.RI "\fBwhen\fP ($concrete)"
.br
.ti -1c
.RI "\fBmake\fP ($abstract, $parameters=array())"
.br
.ti -1c
.RI "\fBcall\fP ($\fBcallback\fP, array $parameters=array(), $defaultMethod=null)"
.br
.ti -1c
.RI "\fBresolved\fP ($abstract)"
.br
.ti -1c
.RI "\fBresolving\fP ($abstract, Closure $\fBcallback\fP=null)"
.br
.ti -1c
.RI "\fBafterResolving\fP ($abstract, Closure $\fBcallback\fP=null)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 5 of file compiled\&.php\&.
.SH "Member Function Documentation"
.PP 
.SS "afterResolving ( $abstract, Closure $callback = \fCnull\fP)"

.PP
Implemented in \fBContainer\fP, and \fBContainer\fP\&.
.SS "afterResolving ( $abstract, Closure $callback = \fCnull\fP)"
Register a new after resolving callback\&.
.PP
\fBParameters:\fP
.RS 4
\fI$abstract\fP 
.br
\fI$callback\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Implemented in \fBContainer\fP, and \fBContainer\fP\&.
.SS "alias ( $abstract,  $alias)"

.PP
Implemented in \fBContainer\fP, and \fBContainer\fP\&.
.SS "alias ( $abstract,  $alias)"
Alias a type to a different name\&.
.PP
\fBParameters:\fP
.RS 4
\fI$abstract\fP 
.br
\fI$alias\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Implemented in \fBContainer\fP, and \fBContainer\fP\&.
.SS "bind ( $abstract,  $concrete = \fCnull\fP,  $shared = \fCfalse\fP)"

.PP
Implemented in \fBContainer\fP, and \fBContainer\fP\&.
.SS "bind ( $abstract,  $concrete = \fCnull\fP,  $shared = \fCfalse\fP)"
Register a binding with the container\&.
.PP
\fBParameters:\fP
.RS 4
\fI$abstract\fP 
.br
\fI$concrete\fP 
.br
\fI$shared\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Implemented in \fBContainer\fP, and \fBContainer\fP\&.
.SS "bindIf ( $abstract,  $concrete = \fCnull\fP,  $shared = \fCfalse\fP)"

.PP
Implemented in \fBContainer\fP, and \fBContainer\fP\&.
.SS "bindIf ( $abstract,  $concrete = \fCnull\fP,  $shared = \fCfalse\fP)"
Register a binding if it hasn't already been registered\&.
.PP
\fBParameters:\fP
.RS 4
\fI$abstract\fP 
.br
\fI$concrete\fP 
.br
\fI$shared\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Implemented in \fBContainer\fP, and \fBContainer\fP\&.
.SS "bound ( $abstract)"

.PP
Implemented in \fBApplication\fP, \fBContainer\fP, \fBApplication\fP, and \fBContainer\fP\&.
.SS "bound ( $abstract)"
Determine if the given abstract type has been bound\&.
.PP
\fBParameters:\fP
.RS 4
\fI$abstract\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
bool 
.RE
.PP

.PP
Implemented in \fBApplication\fP, \fBContainer\fP, \fBApplication\fP, and \fBContainer\fP\&.
.SS "call ( $callback, array $parameters = \fCarray()\fP,  $defaultMethod = \fCnull\fP)"

.PP
Implemented in \fBContainer\fP, and \fBContainer\fP\&.
.SS "call ( $callback, array $parameters = \fCarray()\fP,  $defaultMethod = \fCnull\fP)"
Call the given Closure / class and inject its dependencies\&.
.PP
\fBParameters:\fP
.RS 4
\fI$callback\fP 
.br
\fI$parameters\fP 
.br
\fI$defaultMethod\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
mixed 
.RE
.PP

.PP
Implemented in \fBContainer\fP, and \fBContainer\fP\&.
.SS "extend ( $abstract, Closure $closure)"

.PP
Implemented in \fBContainer\fP, and \fBContainer\fP\&.
.SS "extend ( $abstract, Closure $closure)"
'Extend' an abstract type in the container\&.
.PP
\fBParameters:\fP
.RS 4
\fI$abstract\fP 
.br
\fI$closure\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
void
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fP .RE
.PP

.PP
Implemented in \fBContainer\fP, and \fBContainer\fP\&.
.SS "instance ( $abstract,  $instance)"

.PP
Implemented in \fBContainer\fP, and \fBContainer\fP\&.
.SS "instance ( $abstract,  $instance)"
Register an existing instance as shared in the container\&.
.PP
\fBParameters:\fP
.RS 4
\fI$abstract\fP 
.br
\fI$instance\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Implemented in \fBContainer\fP, and \fBContainer\fP\&.
.SS "make ( $abstract,  $parameters = \fCarray()\fP)"

.PP
Implemented in \fBApplication\fP, \fBContainer\fP, \fBContainer\fP, and \fBApplication\fP\&.
.SS "make ( $abstract,  $parameters = \fCarray()\fP)"
Resolve the given type from the container\&.
.PP
\fBParameters:\fP
.RS 4
\fI$abstract\fP 
.br
\fI$parameters\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
mixed 
.RE
.PP

.PP
Implemented in \fBApplication\fP, \fBContainer\fP, \fBContainer\fP, and \fBApplication\fP\&.
.SS "resolved ( $abstract)"

.PP
Implemented in \fBContainer\fP, and \fBContainer\fP\&.
.SS "resolved ( $abstract)"
Determine if the given abstract type has been resolved\&.
.PP
\fBParameters:\fP
.RS 4
\fI$abstract\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
bool 
.RE
.PP

.PP
Implemented in \fBContainer\fP, and \fBContainer\fP\&.
.SS "resolving ( $abstract, Closure $callback = \fCnull\fP)"

.PP
Implemented in \fBContainer\fP, and \fBContainer\fP\&.
.SS "resolving ( $abstract, Closure $callback = \fCnull\fP)"
Register a new resolving callback\&.
.PP
\fBParameters:\fP
.RS 4
\fI$abstract\fP 
.br
\fI$callback\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Implemented in \fBContainer\fP, and \fBContainer\fP\&.
.SS "singleton ( $abstract,  $concrete = \fCnull\fP)"

.PP
Implemented in \fBContainer\fP, and \fBContainer\fP\&.
.SS "singleton ( $abstract,  $concrete = \fCnull\fP)"
Register a shared binding in the container\&.
.PP
\fBParameters:\fP
.RS 4
\fI$abstract\fP 
.br
\fI$concrete\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Implemented in \fBContainer\fP, and \fBContainer\fP\&.
.SS "tag ( $abstracts,  $tags)"

.PP
Implemented in \fBContainer\fP, and \fBContainer\fP\&.
.SS "tag ( $abstracts,  $tags)"
Assign a set of tags to a given binding\&.
.PP
\fBParameters:\fP
.RS 4
\fI$abstracts\fP 
.br
\fIarray|mixed\fP \&.\&.\&.$tags 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Implemented in \fBContainer\fP, and \fBContainer\fP\&.
.SS "tagged ( $tag)"

.PP
Implemented in \fBContainer\fP, and \fBContainer\fP\&.
.SS "tagged ( $tag)"
Resolve all of the bindings for a given tag\&.
.PP
\fBParameters:\fP
.RS 4
\fI$tag\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
array 
.RE
.PP

.PP
Implemented in \fBContainer\fP, and \fBContainer\fP\&.
.SS "when ( $concrete)"

.PP
Implemented in \fBContainer\fP, and \fBContainer\fP\&.
.SS "when ( $concrete)"
Define a contextual binding\&.
.PP
\fBParameters:\fP
.RS 4
\fI$concrete\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Implemented in \fBContainer\fP, and \fBContainer\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for VirtualSCADA from the source code\&.
