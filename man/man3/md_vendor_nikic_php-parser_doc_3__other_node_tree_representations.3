.TH "md_vendor_nikic_php-parser_doc_3__other_node_tree_representations" 3 "Tue Apr 14 2015" "Version 1.0" "VirtualSCADA" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_vendor_nikic_php-parser_doc_3__other_node_tree_representations \- \fBOther\fP node tree representations 
It is possible to convert the AST into several textual representations, which serve different uses\&.
.PP
.SS "Simple serialization "
.PP
It is possible to serialize the node tree using \fCserialize()\fP and also unserialize it using \fCunserialize()\fP\&. The output is not human readable and not easily processable from anything but \fBPHP\fP, but it is compact and generates fast\&. The main application thus is in caching\&.
.PP
.SS "Human readable dumping "
.PP
Furthermore it is possible to dump nodes into a human readable format using the \fCdump\fP method of \fC\fBPhpParser\fP\\NodeDumper\fP\&. This can be used for debugging\&.
.PP
```php <?php $code = <<<'CODE' <?php
.PP
function printLine($msg) { echo $msg, '\\n'; }
.PP
printLine('Hello World!!!'); CODE;
.PP
$parser = new \fBPhpParser\fP(new \fBPhpParser\fP); $nodeDumper = new \fBPhpParser\fP;
.PP
try { $stmts = $parser->parse($code);
.PP
echo $nodeDumper->dump($stmts), '\\n'; } catch (\fBPhpParser\fP $e) { echo 'Parse \fBError\fP: ', $e->getMessage(); } ```
.PP
The above script will have an output looking roughly like this:
.PP
``` array( 0: Stmt_Function( byRef: false params: array( 0: Param( name: msg default: null type: null byRef: false ) ) stmts: array( 0: Stmt_Echo( exprs: array( 0: Expr_Variable( name: msg ) 1: Scalar_String( value:
.PP
) ) ) ) name: printLine ) 1: Expr_FuncCall( name: Name( parts: array( 0: printLine ) ) args: array( 0: Arg( value: Scalar_String( value: Hello World!!! ) byRef: false ) ) ) ) ```
.PP
.SS "Serialization to XML "
.PP
It is also possible to serialize the node tree to XML using \fC\fBPhpParser\fP\\Serializer\\XML->serialize()\fP and to unserialize it using \fC\fBPhpParser\fP\\Unserializer\\XML->unserialize()\fP\&. This is useful for interfacing with other languages and applications or for doing transformation using XSLT\&.
.PP
```php <?php $code = <<<'CODE' <?php
.PP
function printLine($msg) { echo $msg, '\\n'; }
.PP
printLine('Hello World!!!'); CODE;
.PP
$parser = new \fBPhpParser\fP(new \fBPhpParser\fP); $serializer = new \fBPhpParser\fP;
.PP
try { $stmts = $parser->parse($code);
.PP
echo $serializer->serialize($stmts); } catch (\fBPhpParser\fP $e) { echo 'Parse \fBError\fP: ', $e->getMessage(); } ```
.PP
Produces:
.PP
```xml <?xml version='1\&.0' encoding='UTF-8'?> <AST xmlns:node='http://nikic\&.github\&.com/PHPParser/XML/node' xmlns:subNode='http://nikic\&.github\&.com/PHPParser/XML/subNode' xmlns:scalar='http://nikic\&.github\&.com/PHPParser/XML/scalar'> <scalar:array> <node:Stmt_Function line='2'> <subNode:byRef> <scalar:false/> </subNode:byRef> <subNode:params> <scalar:array> <node:Param line='2'> <subNode:name> <scalar:string>msg</scalar:string> </subNode:name> <subNode:default> <scalar:null/> </subNode:default> <subNode:type> <scalar:null/> </subNode:type> <subNode:byRef> <scalar:false/> </subNode:byRef> </node:Param> </scalar:array> </subNode:params> <subNode:stmts> <scalar:array> <node:Stmt_Echo line='3'> <subNode:exprs> <scalar:array> <node:Expr_Variable line='3'> <subNode:name> <scalar:string>msg</scalar:string> </subNode:name> </node:Expr_Variable> <node:Scalar_String line='3'> <subNode:value> <scalar:string> </scalar:string> </subNode:value> </node:Scalar_String> </scalar:array> </subNode:exprs> </node:Stmt_Echo> </scalar:array> </subNode:stmts> <subNode:name> <scalar:string>printLine</scalar:string> </subNode:name> </node:Stmt_Function> <node:Expr_FuncCall line='6'> <subNode:name> <node:Name line='6'> <subNode:parts> <scalar:array> <scalar:string>printLine</scalar:string> </scalar:array> </subNode:parts> </node:Name> </subNode:name> <subNode:args> <scalar:array> <node:Arg line='6'> <subNode:value> <node:Scalar_String line='6'> <subNode:value> <scalar:string>Hello World!!!</scalar:string> </subNode:value> </node:Scalar_String> </subNode:value> <subNode:byRef> <scalar:false/> </subNode:byRef> </node:Arg> </scalar:array> </subNode:args> </node:Expr_FuncCall> </scalar:array> </AST> ``` 
