.TH "GNUReadline" 3 "Tue Apr 14 2015" "Version 1.0" "VirtualSCADA" \" -*- nroff -*-
.ad l
.nh
.SH NAME
GNUReadline \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBReadline\fP\&.
.PP
Inherited by \fBLibedit\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB__construct\fP ($historyFile=null, $historySize=0, $eraseDups=false)"
.br
.ti -1c
.RI "\fBaddHistory\fP ($\fBline\fP)"
.br
.ti -1c
.RI "\fBclearHistory\fP ()"
.br
.ti -1c
.RI "\fBlistHistory\fP ()"
.br
.ti -1c
.RI "\fBreadHistory\fP ()"
.br
.ti -1c
.RI "\fBreadline\fP ($prompt=null)"
.br
.ti -1c
.RI "\fBredisplay\fP ()"
.br
.ti -1c
.RI "\fBwriteHistory\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBisSupported\fP ()"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fB$historyFile\fP"
.br
.ti -1c
.RI "\fB$historySize\fP"
.br
.ti -1c
.RI "\fB$eraseDups\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBA\fP \fBReadline\fP interface implementation for GNU \fBReadline\fP\&.
.PP
This is by far the coolest way to do it, but it doesn't work with new \fBPHP\fP\&.
.PP
Oh well\&. 
.PP
Definition at line 21 of file GNUReadline\&.php\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "__construct ( $historyFile = \fCnull\fP,  $historySize = \fC0\fP,  $eraseDups = \fCfalse\fP)"
GNU \fBReadline\fP constructor\&. 
.PP
Definition at line 42 of file GNUReadline\&.php\&.
.SH "Member Function Documentation"
.PP 
.SS "addHistory ( $line)"
Add a line to the command history\&.
.PP
\fBParameters:\fP
.RS 4
\fI$line\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
bool \fBSuccess\fP
.RE
.PP
 
.PP
Implements \fBReadline\fP\&.
.PP
Definition at line 52 of file GNUReadline\&.php\&.
.SS "clearHistory ()"
Clear the command history\&.
.PP
\fBReturns:\fP
.RS 4
bool \fBSuccess\fP
.RE
.PP
 
.PP
Implements \fBReadline\fP\&.
.PP
Definition at line 64 of file GNUReadline\&.php\&.
.SS "static isSupported ()\fC [static]\fP"
GNU \fBReadline\fP is supported iff \fCreadline_list_history\fP is defined\&. \fBPHP\fP decided it would be awesome to swap out GNU \fBReadline\fP for \fBLibedit\fP, but they ended up shipping an incomplete implementation\&. So we've got this\&.
.PP
\fBReturns:\fP
.RS 4
bool 
.RE
.PP

.PP
Implements \fBReadline\fP\&.
.PP
Definition at line 34 of file GNUReadline\&.php\&.
.SS "listHistory ()"
List the command history\&.
.PP
\fBReturns:\fP
.RS 4
array
.RE
.PP
 
.PP
Implements \fBReadline\fP\&.
.PP
Definition at line 76 of file GNUReadline\&.php\&.
.SS "readHistory ()"
Read the command history\&.
.PP
\fBReturns:\fP
.RS 4
bool \fBSuccess\fP
.RE
.PP
 
.PP
Implements \fBReadline\fP\&.
.PP
Definition at line 84 of file GNUReadline\&.php\&.
.SS "readline ( $prompt = \fCnull\fP)"
Read a single line of input from the user\&.
.PP
\fBParameters:\fP
.RS 4
\fI$prompt\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
false|string
.RE
.PP
 
.PP
Implements \fBReadline\fP\&.
.PP
Definition at line 104 of file GNUReadline\&.php\&.
.SS "redisplay ()"
Redraw readline to redraw the display\&. 
.PP
Implements \fBReadline\fP\&.
.PP
Definition at line 112 of file GNUReadline\&.php\&.
.SS "writeHistory ()"
Write the command history to a file\&.
.PP
\fBReturns:\fP
.RS 4
bool \fBSuccess\fP
.RE
.PP
 
.PP
Implements \fBReadline\fP\&.
.PP
Definition at line 120 of file GNUReadline\&.php\&.
.SH "Field Documentation"
.PP 
.SS "$eraseDups\fC [protected]\fP"

.PP
Definition at line 25 of file GNUReadline\&.php\&.
.SS "$historyFile\fC [protected]\fP"

.PP
Definition at line 23 of file GNUReadline\&.php\&.
.SS "$historySize\fC [protected]\fP"

.PP
Definition at line 24 of file GNUReadline\&.php\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for VirtualSCADA from the source code\&.
