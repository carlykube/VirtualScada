.TH "md_vendor_monolog_monolog_doc_extending" 3 "Tue Apr 14 2015" "Version 1.0" "VirtualSCADA" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_vendor_monolog_monolog_doc_extending \- Extending \fBMonolog\fP 
\fBMonolog\fP is fully extensible, allowing you to adapt your logger to your needs\&.
.PP
.SS "Writing your own handler "
.PP
\fBMonolog\fP provides many built-in handlers\&. But if the one you need does not exist, you can write it and use it in your logger\&. The only requirement is to implement \fC\fBMonolog\fP\\Handler\\HandlerInterface\fP\&.
.PP
Let's write a PDOHandler to log records to a database\&. We will extend the abstract class provided by \fBMonolog\fP to keep things DRY\&.
.PP
```php <?php
.PP
use \fBMonolog\fP; use \fBMonolog\fP;
.PP
class PDOHandler extends AbstractProcessingHandler { private $initialized = false; private $pdo; private $statement;
.PP
public function __construct(PDO $pdo, $level = Logger::DEBUG, $bubble = true) { $this->pdo = $pdo; parent::__construct($level, $bubble); }
.PP
protected function write(array $record) { if (!$this->initialized) { $this->initialize(); }
.PP
$this->statement->execute(array( 'channel' => $record['channel'], 'level' => $record['level'], 'message' => $record['formatted'], 'time' => $record['datetime']->format('U'), )); }
.PP
private function initialize() { $this->pdo->exec( 'CREATE TABLE IF NOT EXISTS monolog ' \&.'(channel VARCHAR(255), level INTEGER, message LONGTEXT, time INTEGER UNSIGNED)' ); $this->statement = $this->pdo->prepare( 'INSERT INTO monolog (channel, level, message, time) VALUES (:channel, :level, :message, :time)' );
.PP
$this->initialized = true; } } ```
.PP
You can now use this handler in your logger:
.PP
```php <?php
.PP
$logger->pushHandler(new PDOHandler(new PDO('sqlite:logs\&.sqlite')));
.PP
// You can now use your logger $logger->addInfo('\fBMy\fP logger is now ready'); ```
.PP
The \fC\fBMonolog\fP\\Handler\\AbstractProcessingHandler\fP class provides most of the logic needed for the handler, including the use of processors and the formatting of the record (which is why we use \fC$record['formatted']\fP instead of \fC$record['message']\fP)\&. 
