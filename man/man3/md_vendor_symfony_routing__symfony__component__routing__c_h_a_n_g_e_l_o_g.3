.TH "md_vendor_symfony_routing__symfony__component__routing__c_h_a_n_g_e_l_o_g" 3 "Tue Apr 14 2015" "Version 1.0" "VirtualSCADA" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_vendor_symfony_routing__symfony__component__routing__c_h_a_n_g_e_l_o_g \- CHANGELOG 

.SS "2\&.5\&.0 "
.PP
.IP "\(bu" 2
[DEPRECATION] The \fCApacheMatcherDumper\fP and \fCApacheUrlMatcher\fP were deprecated and will be removed in \fBSymfony\fP 3\&.0, since the performance gains were minimal and it's hard to replicate the behaviour of \fBPHP\fP implementation\&.
.PP
.PP
.SS "2\&.3\&.0 "
.PP
.IP "\(bu" 2
added RequestContext::getQueryString()
.PP
.PP
.SS "2\&.2\&.0 "
.PP
.IP "\(bu" 2
[DEPRECATION] Several route settings have been renamed (the old ones will be removed in 3\&.0):
.IP "  \(bu" 4
The \fCpattern\fP setting for a route has been deprecated in favor of \fCpath\fP
.IP "  \(bu" 4
The \fC_scheme\fP and \fC_method\fP requirements have been moved to the \fCschemes\fP and \fCmethods\fP settings
.PP
.PP
Before:
.PP
```yaml article_edit: pattern: /article/{id} requirements: { '_method': 'POST|PUT', '_scheme': 'https', 'id': '+' } ```
.PP
```xml <route id='article_edit' pattern='/article/{id}'> <requirement key='_method'>POST|PUT</requirement> <requirement key='_scheme'>https</requirement> <requirement key='id'>+</requirement> </route> ```
.PP
```php $route = new \fBRoute()\fP; $route->setPattern('/article/{id}'); $route->setRequirement('_method', 'POST|PUT'); $route->setRequirement('_scheme', 'https'); ```
.PP
After:
.PP
```yaml article_edit: path: /article/{id} methods: [POST, PUT] schemes: https requirements: { 'id': '+' } ```
.PP
```xml <route id='article_edit' pattern='/article/{id}' methods='POST PUT' schemes='https'> <requirement key='id'>+</requirement> </route> ```
.PP
```php $route = new \fBRoute()\fP; $route->setPath('/article/{id}'); $route->setMethods(array('POST', 'PUT')); $route->setSchemes('https'); ```
.IP "\(bu" 2
[BC BREAK] RouteCollection does not behave like a tree structure anymore but as a flat array of Routes\&. So when using \fBPHP\fP to build the RouteCollection, you must make sure to add routes to the sub-collection before adding it to the parent collection (this is not relevant when using YAML or XML for \fBRoute\fP definitions)\&.
.PP
Before:
.PP
```php $rootCollection = new RouteCollection(); $subCollection = new RouteCollection(); $rootCollection->addCollection($subCollection); $subCollection->add('foo', new \fBRoute\fP('/foo')); ```
.PP
After:
.PP
```php $rootCollection = new RouteCollection(); $subCollection = new RouteCollection(); $subCollection->add('foo', new \fBRoute\fP('/foo')); $rootCollection->addCollection($subCollection); ```
.PP
Also one must call \fCaddCollection\fP from the bottom to the top hierarchy\&. So the correct sequence is the following (and not the reverse):
.PP
```php $childCollection->addCollection($grandchildCollection); $rootCollection->addCollection($childCollection); ```
.IP "\(bu" 2
[DEPRECATION] The methods \fCRouteCollection::getParent()\fP and \fCRouteCollection::getRoot()\fP have been deprecated and will be removed in \fBSymfony\fP 2\&.3\&.
.IP "\(bu" 2
[BC BREAK] Misusing the \fCRouteCollection::addPrefix\fP method to add defaults, requirements or options without adding a prefix is not supported anymore\&. So if you called \fCaddPrefix\fP with an empty prefix or \fC/\fP only (both have no relevance), like `addPrefix('', $defaultsArray, $requirementsArray, $optionsArray)\fC you need to use the new dedicated methods\fPaddDefaults($defaultsArray)\fC, \fPaddRequirements($requirementsArray)\fCor\fPaddOptions($optionsArray)\fCinstead\&.\fP
.IP "\(bu" 2
\fC[DEPRECATION] The\fP$options\fCparameter to\fPRouteCollection::addPrefix()` has been deprecated because adding options has nothing to do with adding a path prefix\&. If you want to add options to all child routes of a RouteCollection, you can use \fCaddOptions()\fP\&.
.IP "\(bu" 2
[DEPRECATION] The method \fCRouteCollection::getPrefix()\fP has been deprecated because it suggested that all routes in the collection would have this prefix, which is not necessarily true\&. On top of that, since there is no tree structure anymore, this method is also useless\&. Don't worry about performance, prefix optimization for matching is still done in the dumper, which was also improved in 2\&.2\&.0 to find even more grouping possibilities\&.
.IP "\(bu" 2
[DEPRECATION] \fCRouteCollection::addCollection(RouteCollection $collection)\fP should now only be used with a single parameter\&. The other params \fC$prefix\fP, \fC$default\fP, \fC$requirements\fP and \fC$options\fP will still work, but have been deprecated\&. The \fCaddPrefix\fP method should be used for this use-case instead\&. Before: `$parentCollection->addCollection($collection, '/prefix', array(\&.\&.\&.), array(\&.\&.\&.))` After: ```php $collection->addPrefix('/prefix', array(\&.\&.\&.), array(\&.\&.\&.)); $parentCollection->addCollection($collection); ```
.IP "\(bu" 2
added support for the method default argument values when defining a 
.IP "\(bu" 2
Adjacent placeholders without separator work now, e\&.g\&. \fC/{x}{y}{z}\&.{_format}\fP\&.
.IP "\(bu" 2
Characters that function as separator between placeholders are now whitelisted to fix routes with normal text around a variable, e\&.g\&. \fC/prefix{var}suffix\fP\&.
.IP "\(bu" 2
[BC BREAK] The default requirement of a variable has been changed slightly\&. Previously it disallowed the previous and the next char around a variable\&. Now it disallows the slash (\fC/\fP) and the next char\&. Using the previous char added no value and was problematic because the route \fC/index\&.{_format}\fP would be matched by \fC/index\&.ht/ml\fP\&.
.IP "\(bu" 2
The default requirement now uses possessive quantifiers when possible which improves matching performance by up to 20% because it prevents backtracking when it's not needed\&.
.IP "\(bu" 2
The ConfigurableRequirementsInterface can now also be used to disable the requirements check on \fBURL\fP generation completely by calling \fCsetStrictRequirements(null)\fP\&. It improves performance in production environment as you should know that params always pass the requirements (otherwise it would break your link anyway)\&.
.IP "\(bu" 2
There is no restriction on the route name anymore\&. So non-alphanumeric characters are now also allowed\&.
.IP "\(bu" 2
[BC BREAK] \fCRouteCompilerInterface::compile(\fBRoute\fP $route)\fP was made static (only relevant if you implemented your own RouteCompiler)\&.
.IP "\(bu" 2
Added possibility to generate relative paths and network paths in the UrlGenerator, e\&.g\&. '\&.\&./parent-file' and '//example\&.com/dir/file'\&. The third parameter in \fCUrlGeneratorInterface::generate($name, $parameters = array(), $referenceType = self::ABSOLUTE_PATH)\fP now accepts more values and you should use the constants defined in \fCUrlGeneratorInterface\fP for claritiy\&. The old method calls with a Boolean parameter will continue to work because they equal the signature using the constants\&.
.PP
.PP
.SS "2\&.1\&.0 "
.PP
.IP "\(bu" 2
added RequestMatcherInterface
.IP "\(bu" 2
added RequestContext::fromRequest()
.IP "\(bu" 2
the UrlMatcher does not throw a  anymore when the required scheme is not the current one
.IP "\(bu" 2
added TraceableUrlMatcher
.IP "\(bu" 2
added the possibility to define options, default values and requirements for placeholders in prefix, including imported routes
.IP "\(bu" 2
added RouterInterface::getRouteCollection
.IP "\(bu" 2
[BC BREAK] the UrlMatcher urldecodes the route parameters only once, they were decoded twice before\&. Note that the \fCurldecode()\fP calls have been changed for a single \fCrawurldecode()\fP in order to support \fC+\fP for input paths\&.
.IP "\(bu" 2
added RouteCollection::getRoot method to retrieve the root of a RouteCollection tree
.IP "\(bu" 2
[BC BREAK] made RouteCollection::setParent private which could not have been used anyway without creating inconsistencies
.IP "\(bu" 2
[BC BREAK] RouteCollection::remove also removes a route from parent collections (not only from its children)
.IP "\(bu" 2
added ConfigurableRequirementsInterface that allows to disable exceptions (and generate empty URLs instead) when generating a route with an invalid parameter value 
.PP

