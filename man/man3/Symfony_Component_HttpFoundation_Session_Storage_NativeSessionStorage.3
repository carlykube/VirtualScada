.TH "NativeSessionStorage" 3 "Tue Apr 14 2015" "Version 1.0" "VirtualSCADA" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NativeSessionStorage \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBSessionStorageInterface\fP\&.
.PP
Inherited by \fBPhpBridgeSessionStorage\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB__construct\fP (array $\fBoptions\fP=array(), $handler=null, \fBMetadataBag\fP $metaBag=null)"
.br
.ti -1c
.RI "\fBgetSaveHandler\fP ()"
.br
.ti -1c
.RI "\fBstart\fP ()"
.br
.ti -1c
.RI "\fBgetId\fP ()"
.br
.ti -1c
.RI "\fBsetId\fP ($id)"
.br
.ti -1c
.RI "\fBgetName\fP ()"
.br
.ti -1c
.RI "\fBsetName\fP ($\fBname\fP)"
.br
.ti -1c
.RI "\fBregenerate\fP ($destroy=false, $lifetime=null)"
.br
.ti -1c
.RI "\fBsave\fP ()"
.br
.ti -1c
.RI "\fBclear\fP ()"
.br
.ti -1c
.RI "\fBregisterBag\fP (\fBSessionBagInterface\fP $bag)"
.br
.ti -1c
.RI "\fBgetBag\fP ($\fBname\fP)"
.br
.ti -1c
.RI "\fBsetMetadataBag\fP (\fBMetadataBag\fP $metaBag=null)"
.br
.ti -1c
.RI "\fBgetMetadataBag\fP ()"
.br
.ti -1c
.RI "\fBisStarted\fP ()"
.br
.ti -1c
.RI "\fBsetOptions\fP (array $\fBoptions\fP)"
.br
.ti -1c
.RI "\fBsetSaveHandler\fP ($saveHandler=null)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBloadSession\fP (array &$session=null)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fB$bags\fP"
.br
.ti -1c
.RI "\fB$started\fP = false"
.br
.ti -1c
.RI "\fB$closed\fP = false"
.br
.ti -1c
.RI "\fB$saveHandler\fP"
.br
.ti -1c
.RI "\fB$metadataBag\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This provides a base class for session attribute storage\&.
.PP
\fBAuthor:\fP
.RS 4
Drak drak@zikula.org 
.RE
.PP

.PP
Definition at line 25 of file NativeSessionStorage\&.php\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "__construct (array $options = \fCarray()\fP,  $handler = \fCnull\fP, \fBMetadataBag\fP $metaBag = \fCnull\fP)"
Constructor\&.
.PP
Depending on how you want the storage driver to behave you probably want to override this constructor entirely\&.
.PP
List of options for $options array with their defaults\&.
.PP
\fBSee also:\fP
.RS 4
http://php.net/session.configuration \fBfor\fP \fBoptions\fP but we omit 'session\&.' from the beginning of the \fBkeys\fP \fBfor\fP convenience\&.
.RE
.PP
('auto_start', is not supported as it tells \fBPHP\fP to start a session before \fBPHP\fP starts to execute user-land code\&. Setting during runtime has no effect)\&.
.PP
cache_limiter, 'nocache' (use '0' to prevent headers from being sent entirely)\&. cookie_domain, '' cookie_httponly, '' cookie_lifetime, '0' cookie_path, '/' cookie_secure, '' entropy_file, '' entropy_length, '0' gc_divisor, '100' gc_maxlifetime, '1440' gc_probability, '1' hash_bits_per_character, '4' hash_function, '0' name, 'PHPSESSID' referer_check, '' serialize_handler, 'php' use_cookies, '1' use_only_cookies, '1' use_trans_sid, '0' upload_progress\&.enabled, '1' upload_progress\&.cleanup, '1' upload_progress\&.prefix, 'upload_progress_' upload_progress\&.name, 'PHP_SESSION_UPLOAD_PROGRESS' upload_progress\&.freq, '1%' upload_progress\&.min-freq, '1' url_rewriter\&.tags, 'a=href,area=href,frame=src,form=,fieldset='
.PP
\fBParameters:\fP
.RS 4
\fI$options\fP \fBSession\fP configuration options\&. 
.br
\fI$handler\fP 
.br
\fI$metaBag\fP \fBMetadataBag\fP\&. 
.RE
.PP

.PP
Definition at line 99 of file NativeSessionStorage\&.php\&.
.SH "Member Function Documentation"
.PP 
.SS "clear ()"
{Clear all session data in memory\&.} 
.PP
Implements \fBSessionStorageInterface\fP\&.
.PP
Definition at line 228 of file NativeSessionStorage\&.php\&.
.SS "getBag ( $name)"
{Gets a \fBSessionBagInterface\fP by name\&.
.PP
\fBParameters:\fP
.RS 4
\fI$name\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBSessionBagInterface\fP
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fP .RE
.PP
} 
.PP
Implements \fBSessionStorageInterface\fP\&.
.PP
Definition at line 253 of file NativeSessionStorage\&.php\&.
.SS "getId ()"
{Returns the session ID\&.
.PP
\fBReturns:\fP
.RS 4
string The session ID or empty\&.
.RE
.PP
} 
.PP
Implements \fBSessionStorageInterface\fP\&.
.PP
Definition at line 164 of file NativeSessionStorage\&.php\&.
.SS "getMetadataBag ()"
Gets the \fBMetadataBag\fP\&.
.PP
\fBReturns:\fP
.RS 4
\fBMetadataBag\fP 
.RE
.PP

.PP
Implements \fBSessionStorageInterface\fP\&.
.PP
Definition at line 287 of file NativeSessionStorage\&.php\&.
.SS "getName ()"
{Returns the session name\&.
.PP
\fBReturns:\fP
.RS 4
mixed The session name\&.
.RE
.PP
} 
.PP
Implements \fBSessionStorageInterface\fP\&.
.PP
Definition at line 180 of file NativeSessionStorage\&.php\&.
.SS "getSaveHandler ()"
Gets the save handler instance\&.
.PP
\fBReturns:\fP
.RS 4
AbstractProxy 
.RE
.PP

.PP
Definition at line 120 of file NativeSessionStorage\&.php\&.
.SS "isStarted ()"
{Checks if the session is started\&.
.PP
\fBReturns:\fP
.RS 4
bool True if started, false otherwise\&.
.RE
.PP
} 
.PP
Implements \fBSessionStorageInterface\fP\&.
.PP
Definition at line 295 of file NativeSessionStorage\&.php\&.
.SS "loadSession (array & $session = \fCnull\fP)\fC [protected]\fP"
Load the session with attributes\&.
.PP
After starting the session, \fBPHP\fP retrieves the session from whatever handlers are set to (either \fBPHP\fP's internal, or a custom save handler set with session_set_save_handler())\&. \fBPHP\fP takes the return value from the read() handler, unserializes it and populates $_SESSION with the result automatically\&.
.PP
\fBParameters:\fP
.RS 4
\fI$session\fP 
.RE
.PP

.PP
Definition at line 397 of file NativeSessionStorage\&.php\&.
.SS "regenerate ( $destroy = \fCfalse\fP,  $lifetime = \fCnull\fP)"
{Regenerates id that represents this storage\&.
.PP
This method must invoke session_regenerate_id($destroy) unless this interface is used for a storage object designed for unit or functional testing where a real \fBPHP\fP session would interfere with testing\&.
.PP
Note regenerate+destroy should not clear the session data in memory only delete the session data from persistent storage\&.
.PP
Care: When regenerating the session ID no locking is involved in PHPs session design\&. See https://bugs.php.net/bug.php?id=61470 for a discussion\&. So you must make sure the regenerated session is saved BEFORE sending the headers with the new ID\&. Symfonys \fBHttpKernel\fP offers a listener for this\&. See \fBSymfony\fP\&. Otherwise session data could get lost again for concurrent requests with the new ID\&. \fBOne\fP result could be that you get logged out after just logging in\&.
.PP
\fBParameters:\fP
.RS 4
\fI$destroy\fP Destroy session when regenerating? 
.br
\fI$lifetime\fP Sets the cookie lifetime for the session cookie\&. \fBA\fP null value will leave the system settings unchanged, 0 sets the cookie to expire with browser session\&. Time is in seconds, and is not a Unix timestamp\&.
.RE
.PP
\fBReturns:\fP
.RS 4
bool True if session regenerated, false if error
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fP .RE
.PP
} 
.PP
Implements \fBSessionStorageInterface\fP\&.
.PP
Definition at line 196 of file NativeSessionStorage\&.php\&.
.SS "registerBag (\fBSessionBagInterface\fP $bag)"
{Registers a \fBSessionBagInterface\fP for use\&.
.PP
\fBParameters:\fP
.RS 4
\fI$bag\fP 
.RE
.PP
} 
.PP
Implements \fBSessionStorageInterface\fP\&.
.PP
Definition at line 245 of file NativeSessionStorage\&.php\&.
.SS "save ()"
{Force the session to be saved and closed\&.
.PP
This method must invoke session_write_close() unless this interface is used for a storage object design for unit or functional testing where a real \fBPHP\fP session would interfere with testing, in which case it it should actually persist the session data if required\&.
.PP
\fBExceptions:\fP
.RS 4
\fI\fP .RE
.PP
} 
.PP
Implements \fBSessionStorageInterface\fP\&.
.PP
Definition at line 212 of file NativeSessionStorage\&.php\&.
.SS "setId ( $id)"
{Sets the session ID\&.
.PP
\fBParameters:\fP
.RS 4
\fI$id\fP 
.RE
.PP
} 
.PP
Implements \fBSessionStorageInterface\fP\&.
.PP
Definition at line 172 of file NativeSessionStorage\&.php\&.
.SS "setMetadataBag (\fBMetadataBag\fP $metaBag = \fCnull\fP)"
Sets the \fBMetadataBag\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fI$metaBag\fP 
.RE
.PP

.PP
Definition at line 273 of file NativeSessionStorage\&.php\&.
.SS "setName ( $name)"
{Sets the session name\&.
.PP
\fBParameters:\fP
.RS 4
\fI$name\fP 
.RE
.PP
} 
.PP
Implements \fBSessionStorageInterface\fP\&.
.PP
Definition at line 188 of file NativeSessionStorage\&.php\&.
.SS "setOptions (array $options)"
Sets session\&.* ini variables\&.
.PP
For convenience we omit 'session\&.' from the beginning of the keys\&. Explicitly ignores other ini keys\&.
.PP
\fBParameters:\fP
.RS 4
\fI$options\fP \fBSession\fP ini directives array(key => value)\&.
.RE
.PP
\fBSee also:\fP
.RS 4
http://php.net/session.configuration 
.RE
.PP

.PP
Definition at line 310 of file NativeSessionStorage\&.php\&.
.SS "setSaveHandler ( $saveHandler = \fCnull\fP)"
Registers session save handler as a \fBPHP\fP session handler\&.
.PP
To use internal \fBPHP\fP session save handlers, override this method using ini_set with session\&.save_handler and session\&.save_path e\&.g\&. 
.PP
.nf
ini_set('session.save_handler', 'files');
ini_set('session.save_path', /tmp');

.fi
.PP
.PP
or pass in a NativeSessionHandler instance which configures session\&.save_handler in the constructor, for a template see NativeFileSessionHandler or use handlers in composer package drak/native-session
.PP
\fBSee also:\fP
.RS 4
http://php.net/session-set-save-handler 
.PP
http://php.net/sessionhandlerinterface 
.PP
http://php.net/sessionhandler 
.PP
http://github.com/drak/NativeSession
.RE
.PP
\fBParameters:\fP
.RS 4
\fI$saveHandler\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fP .RE
.PP

.PP
Definition at line 353 of file NativeSessionStorage\&.php\&.
.SS "start ()"
{Starts the session\&.
.PP
\fBExceptions:\fP
.RS 4
\fI\fP .RE
.PP
} 
.PP
Implements \fBSessionStorageInterface\fP\&.
.PP
Definition at line 128 of file NativeSessionStorage\&.php\&.
.SH "Field Documentation"
.PP 
.SS "$bags\fC [protected]\fP"

.PP
Definition at line 32 of file NativeSessionStorage\&.php\&.
.SS "$closed = false\fC [protected]\fP"

.PP
Definition at line 42 of file NativeSessionStorage\&.php\&.
.SS "$metadataBag\fC [protected]\fP"

.PP
Definition at line 52 of file NativeSessionStorage\&.php\&.
.SS "$saveHandler\fC [protected]\fP"

.PP
Definition at line 47 of file NativeSessionStorage\&.php\&.
.SS "$started = false\fC [protected]\fP"

.PP
Definition at line 37 of file NativeSessionStorage\&.php\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for VirtualSCADA from the source code\&.
