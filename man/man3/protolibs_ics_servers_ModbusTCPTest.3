.TH "ModbusTCPTest" 3 "Tue Apr 14 2015" "Version 1.0" "VirtualSCADA" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ModbusTCPTest \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "def \fBprint_tb\fP (self)"
.br
.ti -1c
.RI "def \fBtestPolling\fP (self)"
.br
.ti -1c
.RI "def \fBtearDown\fP (self)"
.br
.ti -1c
.RI "def \fBsetUp\fP (self)"
.br
.ti -1c
.RI "def \fBrun\fP (self)"
.br
.in -1c
.SS "Data Fields"

.in +1c
.ti -1c
.RI "\fBport\fP"
.br
.ti -1c
.RI "\fBpoints\fP"
.br
.ti -1c
.RI "\fBserver\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
.nf
@ internal
   Contains methods for testing a ModbusTCP server. Subclassing unittest 
        didn't work  with the master-slave network paradigm for some reason.
    To run, use create a new ModbusTCPTest object and call runTest(). This
    method will return True if the test passes, false otherwise. It will
    catch errors and exit gracefully. 
    
    Be sure the Python interpreter has root priviledges in order to open
    port 502.

.fi
.PP
 
.PP
Definition at line 190 of file ics_servers\&.py\&.
.SH "Member Function Documentation"
.PP 
.SS "def print_tb ( self)"

.PP
Definition at line 201 of file ics_servers\&.py\&.
.SS "def run ( self)"

.PP
Definition at line 278 of file ics_servers\&.py\&.
.SS "def setUp ( self)"

.PP
.nf
This method can be called externally to set up a server for 
testing.
.fi
.PP
 
.PP
Definition at line 251 of file ics_servers\&.py\&.
.SS "def tearDown ( self)"

.PP
Definition at line 247 of file ics_servers\&.py\&.
.SS "def testPolling ( self)"

.PP
Definition at line 210 of file ics_servers\&.py\&.
.SH "Field Documentation"
.PP 
.SS "points"

.PP
Definition at line 275 of file ics_servers\&.py\&.
.SS "port"

.PP
Definition at line 255 of file ics_servers\&.py\&.
.SS "server"

.PP
Definition at line 276 of file ics_servers\&.py\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for VirtualSCADA from the source code\&.
