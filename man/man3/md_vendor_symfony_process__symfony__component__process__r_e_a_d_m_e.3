.TH "md_vendor_symfony_process__symfony__component__process__r_e_a_d_m_e" 3 "Tue Apr 14 2015" "Version 1.0" "VirtualSCADA" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_vendor_symfony_process__symfony__component__process__r_e_a_d_m_e \- Process Component 
Process executes commands in sub-processes\&.
.PP
In this example, we run a simple directory listing and get the result back:
.PP
```php use \fBSymfony\fP;
.PP
$process = new Process('ls -lsa'); $process->setTimeout(3600); $process->run(); if (!$process->isSuccessful()) { throw new RuntimeException($process->getErrorOutput()); }
.PP
print $process->getOutput(); ```
.PP
You can think that this is easy to achieve with plain \fBPHP\fP but it's not especially if you want to take care of the subtle differences between the different platforms\&.
.PP
And if you want to be able to get some feedback in real-time, just pass an anonymous function to the \fCrun()\fP method and you will get the output buffer as it becomes available:
.PP
```php use \fBSymfony\fP;
.PP
$process = new Process('ls -lsa'); $process->run(function ($type, $buffer) { if (Process::ERR === $type) { echo 'ERR > '\&.$buffer; } else { echo 'OUT > '\&.$buffer; } }); ```
.PP
That's great if you want to execute a long running command (like rsync-ing files to a remote server) and give feedback to the user in real-time\&.
.PP
.SS "Resources "
.PP
You can run the unit tests with the following command: 
.PP
.nf
$ cd path/to/Symfony/Component/Process/
$ composer install
$ phpunit
.fi
.PP
 
