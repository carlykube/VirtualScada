.TH "Request" 3 "Tue Apr 14 2015" "Version 1.0" "VirtualSCADA" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Request \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBRequest\fP, \fBRequest\fP, \fBApacheRequest\fP, \fBNewRequest\fP, and \fBRequestContentProxy\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB__construct\fP (array $query=array(), array $request=array(), array $attributes=array(), array $cookies=array(), array $files=array(), array $server=array(), $content=null)"
.br
.ti -1c
.RI "\fBinitialize\fP (array $query=array(), array $request=array(), array $attributes=array(), array $cookies=array(), array $files=array(), array $server=array(), $content=null)"
.br
.ti -1c
.RI "\fBduplicate\fP (array $query=null, array $request=null, array $attributes=null, array $cookies=null, array $files=null, array $server=null)"
.br
.ti -1c
.RI "\fB__clone\fP ()"
.br
.ti -1c
.RI "\fB__toString\fP ()"
.br
.ti -1c
.RI "\fBoverrideGlobals\fP ()"
.br
.ti -1c
.RI "\fBget\fP ($key, $default=null, $deep=false)"
.br
.ti -1c
.RI "\fBgetSession\fP ()"
.br
.ti -1c
.RI "\fBhasPreviousSession\fP ()"
.br
.ti -1c
.RI "\fBhasSession\fP ()"
.br
.ti -1c
.RI "\fBsetSession\fP (\fBSessionInterface\fP $session)"
.br
.ti -1c
.RI "\fBgetClientIps\fP ()"
.br
.ti -1c
.RI "\fBgetClientIp\fP ()"
.br
.ti -1c
.RI "\fBgetScriptName\fP ()"
.br
.ti -1c
.RI "\fBgetPathInfo\fP ()"
.br
.ti -1c
.RI "\fBgetBasePath\fP ()"
.br
.ti -1c
.RI "\fBgetBaseUrl\fP ()"
.br
.ti -1c
.RI "\fBgetScheme\fP ()"
.br
.ti -1c
.RI "\fBgetPort\fP ()"
.br
.ti -1c
.RI "\fBgetUser\fP ()"
.br
.ti -1c
.RI "\fBgetPassword\fP ()"
.br
.ti -1c
.RI "\fBgetUserInfo\fP ()"
.br
.ti -1c
.RI "\fBgetHttpHost\fP ()"
.br
.ti -1c
.RI "\fBgetRequestUri\fP ()"
.br
.ti -1c
.RI "\fBgetSchemeAndHttpHost\fP ()"
.br
.ti -1c
.RI "\fBgetUri\fP ()"
.br
.ti -1c
.RI "\fBgetUriForPath\fP ($\fBpath\fP)"
.br
.ti -1c
.RI "\fBgetQueryString\fP ()"
.br
.ti -1c
.RI "\fBisSecure\fP ()"
.br
.ti -1c
.RI "\fBgetHost\fP ()"
.br
.ti -1c
.RI "\fBsetMethod\fP ($method)"
.br
.ti -1c
.RI "\fBgetMethod\fP ()"
.br
.ti -1c
.RI "\fBgetRealMethod\fP ()"
.br
.ti -1c
.RI "\fBgetMimeType\fP ($\fBformat\fP)"
.br
.ti -1c
.RI "\fBgetFormat\fP ($mimeType)"
.br
.ti -1c
.RI "\fBsetFormat\fP ($\fBformat\fP, $mimeTypes)"
.br
.ti -1c
.RI "\fBgetRequestFormat\fP ($default= '\fBhtml\fP')"
.br
.ti -1c
.RI "\fBsetRequestFormat\fP ($\fBformat\fP)"
.br
.ti -1c
.RI "\fBgetContentType\fP ()"
.br
.ti -1c
.RI "\fBsetDefaultLocale\fP ($\fBlocale\fP)"
.br
.ti -1c
.RI "\fBgetDefaultLocale\fP ()"
.br
.ti -1c
.RI "\fBsetLocale\fP ($\fBlocale\fP)"
.br
.ti -1c
.RI "\fBgetLocale\fP ()"
.br
.ti -1c
.RI "\fBisMethod\fP ($method)"
.br
.ti -1c
.RI "\fBisMethodSafe\fP ()"
.br
.ti -1c
.RI "\fBgetContent\fP ($asResource=false)"
.br
.ti -1c
.RI "\fBgetETags\fP ()"
.br
.ti -1c
.RI "\fBisNoCache\fP ()"
.br
.ti -1c
.RI "\fBgetPreferredLanguage\fP (array $locales=null)"
.br
.ti -1c
.RI "\fBgetLanguages\fP ()"
.br
.ti -1c
.RI "\fBgetCharsets\fP ()"
.br
.ti -1c
.RI "\fBgetEncodings\fP ()"
.br
.ti -1c
.RI "\fBgetAcceptableContentTypes\fP ()"
.br
.ti -1c
.RI "\fBisXmlHttpRequest\fP ()"
.br
.ti -1c
.RI "\fB__construct\fP (array $query=array(), array $request=array(), array $attributes=array(), array $cookies=array(), array $files=array(), array $server=array(), $content=null)"
.br
.ti -1c
.RI "\fBinitialize\fP (array $query=array(), array $request=array(), array $attributes=array(), array $cookies=array(), array $files=array(), array $server=array(), $content=null)"
.br
.ti -1c
.RI "\fBduplicate\fP (array $query=null, array $request=null, array $attributes=null, array $cookies=null, array $files=null, array $server=null)"
.br
.ti -1c
.RI "\fB__clone\fP ()"
.br
.ti -1c
.RI "\fB__toString\fP ()"
.br
.ti -1c
.RI "\fBoverrideGlobals\fP ()"
.br
.ti -1c
.RI "\fBget\fP ($key, $default=null, $deep=false)"
.br
.ti -1c
.RI "\fBgetSession\fP ()"
.br
.ti -1c
.RI "\fBhasPreviousSession\fP ()"
.br
.ti -1c
.RI "\fBhasSession\fP ()"
.br
.ti -1c
.RI "\fBsetSession\fP (\fBSessionInterface\fP $session)"
.br
.ti -1c
.RI "\fBgetClientIps\fP ()"
.br
.ti -1c
.RI "\fBgetClientIp\fP ()"
.br
.ti -1c
.RI "\fBgetScriptName\fP ()"
.br
.ti -1c
.RI "\fBgetPathInfo\fP ()"
.br
.ti -1c
.RI "\fBgetBasePath\fP ()"
.br
.ti -1c
.RI "\fBgetBaseUrl\fP ()"
.br
.ti -1c
.RI "\fBgetScheme\fP ()"
.br
.ti -1c
.RI "\fBgetPort\fP ()"
.br
.ti -1c
.RI "\fBgetUser\fP ()"
.br
.ti -1c
.RI "\fBgetPassword\fP ()"
.br
.ti -1c
.RI "\fBgetUserInfo\fP ()"
.br
.ti -1c
.RI "\fBgetHttpHost\fP ()"
.br
.ti -1c
.RI "\fBgetRequestUri\fP ()"
.br
.ti -1c
.RI "\fBgetSchemeAndHttpHost\fP ()"
.br
.ti -1c
.RI "\fBgetUri\fP ()"
.br
.ti -1c
.RI "\fBgetUriForPath\fP ($\fBpath\fP)"
.br
.ti -1c
.RI "\fBgetQueryString\fP ()"
.br
.ti -1c
.RI "\fBisSecure\fP ()"
.br
.ti -1c
.RI "\fBgetHost\fP ()"
.br
.ti -1c
.RI "\fBsetMethod\fP ($method)"
.br
.ti -1c
.RI "\fBgetMethod\fP ()"
.br
.ti -1c
.RI "\fBgetRealMethod\fP ()"
.br
.ti -1c
.RI "\fBgetMimeType\fP ($\fBformat\fP)"
.br
.ti -1c
.RI "\fBgetFormat\fP ($mimeType)"
.br
.ti -1c
.RI "\fBsetFormat\fP ($\fBformat\fP, $mimeTypes)"
.br
.ti -1c
.RI "\fBgetRequestFormat\fP ($default= '\fBhtml\fP')"
.br
.ti -1c
.RI "\fBsetRequestFormat\fP ($\fBformat\fP)"
.br
.ti -1c
.RI "\fBgetContentType\fP ()"
.br
.ti -1c
.RI "\fBsetDefaultLocale\fP ($\fBlocale\fP)"
.br
.ti -1c
.RI "\fBgetDefaultLocale\fP ()"
.br
.ti -1c
.RI "\fBsetLocale\fP ($\fBlocale\fP)"
.br
.ti -1c
.RI "\fBgetLocale\fP ()"
.br
.ti -1c
.RI "\fBisMethod\fP ($method)"
.br
.ti -1c
.RI "\fBisMethodSafe\fP ()"
.br
.ti -1c
.RI "\fBgetContent\fP ($asResource=false)"
.br
.ti -1c
.RI "\fBgetETags\fP ()"
.br
.ti -1c
.RI "\fBisNoCache\fP ()"
.br
.ti -1c
.RI "\fBgetPreferredLanguage\fP (array $locales=null)"
.br
.ti -1c
.RI "\fBgetLanguages\fP ()"
.br
.ti -1c
.RI "\fBgetCharsets\fP ()"
.br
.ti -1c
.RI "\fBgetEncodings\fP ()"
.br
.ti -1c
.RI "\fBgetAcceptableContentTypes\fP ()"
.br
.ti -1c
.RI "\fBisXmlHttpRequest\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBcreateFromGlobals\fP ()"
.br
.ti -1c
.RI "static \fBcreate\fP ($uri, $method= 'GET', $parameters=array(), $cookies=array(), $files=array(), $server=array(), $content=null)"
.br
.ti -1c
.RI "static \fBsetFactory\fP ($callable)"
.br
.ti -1c
.RI "static \fBsetTrustedProxies\fP (array $proxies)"
.br
.ti -1c
.RI "static \fBgetTrustedProxies\fP ()"
.br
.ti -1c
.RI "static \fBsetTrustedHosts\fP (array $hostPatterns)"
.br
.ti -1c
.RI "static \fBgetTrustedHosts\fP ()"
.br
.ti -1c
.RI "static \fBsetTrustedHeaderName\fP ($key, $value)"
.br
.ti -1c
.RI "static \fBgetTrustedHeaderName\fP ($key)"
.br
.ti -1c
.RI "static \fBnormalizeQueryString\fP ($qs)"
.br
.ti -1c
.RI "static \fBenableHttpMethodParameterOverride\fP ()"
.br
.ti -1c
.RI "static \fBgetHttpMethodParameterOverride\fP ()"
.br
.ti -1c
.RI "static \fBcreateFromGlobals\fP ()"
.br
.ti -1c
.RI "static \fBcreate\fP ($uri, $method= 'GET', $parameters=array(), $cookies=array(), $files=array(), $server=array(), $content=null)"
.br
.ti -1c
.RI "static \fBsetFactory\fP ($callable)"
.br
.ti -1c
.RI "static \fBsetTrustedProxies\fP (array $proxies)"
.br
.ti -1c
.RI "static \fBgetTrustedProxies\fP ()"
.br
.ti -1c
.RI "static \fBsetTrustedHosts\fP (array $hostPatterns)"
.br
.ti -1c
.RI "static \fBgetTrustedHosts\fP ()"
.br
.ti -1c
.RI "static \fBsetTrustedHeaderName\fP ($key, $value)"
.br
.ti -1c
.RI "static \fBgetTrustedHeaderName\fP ($key)"
.br
.ti -1c
.RI "static \fBnormalizeQueryString\fP ($qs)"
.br
.ti -1c
.RI "static \fBenableHttpMethodParameterOverride\fP ()"
.br
.ti -1c
.RI "static \fBgetHttpMethodParameterOverride\fP ()"
.br
.in -1c
.SS "Data Fields"

.in +1c
.ti -1c
.RI "const \fBHEADER_CLIENT_IP\fP = 'client_ip'"
.br
.ti -1c
.RI "const \fBHEADER_CLIENT_HOST\fP = 'client_host'"
.br
.ti -1c
.RI "const \fBHEADER_CLIENT_PROTO\fP = 'client_proto'"
.br
.ti -1c
.RI "const \fBHEADER_CLIENT_PORT\fP = 'client_port'"
.br
.ti -1c
.RI "const \fBMETHOD_HEAD\fP = 'HEAD'"
.br
.ti -1c
.RI "const \fBMETHOD_GET\fP = 'GET'"
.br
.ti -1c
.RI "const \fBMETHOD_POST\fP = 'POST'"
.br
.ti -1c
.RI "const \fBMETHOD_PUT\fP = 'PUT'"
.br
.ti -1c
.RI "const \fBMETHOD_PATCH\fP = 'PATCH'"
.br
.ti -1c
.RI "const \fBMETHOD_DELETE\fP = 'DELETE'"
.br
.ti -1c
.RI "const \fBMETHOD_PURGE\fP = 'PURGE'"
.br
.ti -1c
.RI "const \fBMETHOD_OPTIONS\fP = 'OPTIONS'"
.br
.ti -1c
.RI "const \fBMETHOD_TRACE\fP = 'TRACE'"
.br
.ti -1c
.RI "const \fBMETHOD_CONNECT\fP = 'CONNECT'"
.br
.ti -1c
.RI "\fB$attributes\fP"
.br
.ti -1c
.RI "\fB$request\fP"
.br
.ti -1c
.RI "\fB$query\fP"
.br
.ti -1c
.RI "\fB$server\fP"
.br
.ti -1c
.RI "\fB$files\fP"
.br
.ti -1c
.RI "\fB$cookies\fP"
.br
.ti -1c
.RI "\fB$headers\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBprepareRequestUri\fP ()"
.br
.ti -1c
.RI "\fBprepareBaseUrl\fP ()"
.br
.ti -1c
.RI "\fBprepareBasePath\fP ()"
.br
.ti -1c
.RI "\fBpreparePathInfo\fP ()"
.br
.ti -1c
.RI "\fBprepareRequestUri\fP ()"
.br
.ti -1c
.RI "\fBprepareBaseUrl\fP ()"
.br
.ti -1c
.RI "\fBprepareBasePath\fP ()"
.br
.ti -1c
.RI "\fBpreparePathInfo\fP ()"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static \fBinitializeFormats\fP ()"
.br
.ti -1c
.RI "static \fBinitializeFormats\fP ()"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fB$content\fP"
.br
.ti -1c
.RI "\fB$languages\fP"
.br
.ti -1c
.RI "\fB$charsets\fP"
.br
.ti -1c
.RI "\fB$encodings\fP"
.br
.ti -1c
.RI "\fB$acceptableContentTypes\fP"
.br
.ti -1c
.RI "\fB$pathInfo\fP"
.br
.ti -1c
.RI "\fB$requestUri\fP"
.br
.ti -1c
.RI "\fB$baseUrl\fP"
.br
.ti -1c
.RI "\fB$basePath\fP"
.br
.ti -1c
.RI "\fB$method\fP"
.br
.ti -1c
.RI "\fB$format\fP"
.br
.ti -1c
.RI "\fB$session\fP"
.br
.ti -1c
.RI "\fB$locale\fP"
.br
.ti -1c
.RI "\fB$defaultLocale\fP = 'en'"
.br
.in -1c
.SS "Static Protected Attributes"

.in +1c
.ti -1c
.RI "static \fB$trustedProxies\fP = array()"
.br
.ti -1c
.RI "static \fB$trustedHostPatterns\fP = array()"
.br
.ti -1c
.RI "static \fB$trustedHosts\fP = array()"
.br
.ti -1c
.RI "static \fB$trustedHeaders\fP = array(self::HEADER_CLIENT_IP => 'X_FORWARDED_FOR', self::HEADER_CLIENT_HOST => 'X_FORWARDED_HOST', self::HEADER_CLIENT_PROTO => 'X_FORWARDED_PROTO', self::HEADER_CLIENT_PORT => 'X_FORWARDED_PORT')"
.br
.ti -1c
.RI "static \fB$httpMethodParameterOverride\fP = false"
.br
.ti -1c
.RI "static \fB$formats\fP"
.br
.ti -1c
.RI "static \fB$requestFactory\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBRequest\fP represents an HTTP request\&.
.PP
The methods dealing with \fBURL\fP accept / return a raw path (% encoded):
.IP "\(bu" 2
getBasePath
.IP "\(bu" 2
getBaseUrl
.IP "\(bu" 2
getPathInfo
.IP "\(bu" 2
getRequestUri
.IP "\(bu" 2
getUri
.IP "\(bu" 2
getUriForPath
.PP
.PP
\fBAuthor:\fP
.RS 4
Fabien Potencier fabien@symfony.com
.RE
.PP

.PP
Definition at line 2530 of file compiled\&.php\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "__construct (array $query = \fCarray()\fP, array $request = \fCarray()\fP, array $attributes = \fCarray()\fP, array $cookies = \fCarray()\fP, array $files = \fCarray()\fP, array $server = \fCarray()\fP,  $content = \fCnull\fP)"

.PP
Definition at line 2574 of file compiled\&.php\&.
.SS "__construct (array $query = \fCarray()\fP, array $request = \fCarray()\fP, array $attributes = \fCarray()\fP, array $cookies = \fCarray()\fP, array $files = \fCarray()\fP, array $server = \fCarray()\fP,  $content = \fCnull\fP)"
Constructor\&.
.PP
\fBParameters:\fP
.RS 4
\fI$query\fP The GET parameters 
.br
\fI$request\fP The POST parameters 
.br
\fI$attributes\fP The request attributes (parameters parsed from the PATH_INFO, \&.\&.\&.) 
.br
\fI$cookies\fP The COOKIE parameters 
.br
\fI$files\fP The FILES parameters 
.br
\fI$server\fP The SERVER parameters 
.br
\fI$content\fP The raw body data
.RE
.PP

.PP
Definition at line 230 of file Request\&.php\&.
.SH "Member Function Documentation"
.PP 
.SS "__clone ()"
Clones the current request\&.
.PP
Note that the session is not cloned as duplicated requests are most of the time sub-requests of the main one\&. 
.PP
Definition at line 495 of file Request\&.php\&.
.SS "__clone ()"

.PP
Definition at line 2726 of file compiled\&.php\&.
.SS "__toString ()"
Returns the request as a string\&.
.PP
\fBReturns:\fP
.RS 4
string The request 
.RE
.PP

.PP
Definition at line 511 of file Request\&.php\&.
.SS "__toString ()"

.PP
Definition at line 2736 of file compiled\&.php\&.
.SS "static create ( $uri,  $method = \fC'GET'\fP,  $parameters = \fCarray()\fP,  $cookies = \fCarray()\fP,  $files = \fCarray()\fP,  $server = \fCarray()\fP,  $content = \fCnull\fP)\fC [static]\fP"
Creates a \fBRequest\fP based on a given URI and configuration\&.
.PP
The information contained in the URI always take precedence over the other information (server and parameters)\&.
.PP
\fBParameters:\fP
.RS 4
\fI$uri\fP The URI 
.br
\fI$method\fP The HTTP method 
.br
\fI$parameters\fP The query (GET) or request (POST) parameters 
.br
\fI$cookies\fP The request cookies ($_COOKIE) 
.br
\fI$files\fP The request files ($_FILES) 
.br
\fI$server\fP The server parameters ($_SERVER) 
.br
\fI$content\fP The raw body data
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRequest\fP \fBA\fP \fBRequest\fP instance
.RE
.PP

.PP
Definition at line 325 of file Request\&.php\&.
.SS "static create ( $uri,  $method = \fC'GET'\fP,  $parameters = \fCarray()\fP,  $cookies = \fCarray()\fP,  $files = \fCarray()\fP,  $server = \fCarray()\fP,  $content = \fCnull\fP)\fC [static]\fP"

.PP
Definition at line 2617 of file compiled\&.php\&.
.SS "static createFromGlobals ()\fC [static]\fP"
Creates a new request with values from \fBPHP\fP's super globals\&.
.PP
\fBReturns:\fP
.RS 4
\fBRequest\fP \fBA\fP new request
.RE
.PP

.PP
Definition at line 280 of file Request\&.php\&.
.SS "static createFromGlobals ()\fC [static]\fP"

.PP
Definition at line 2599 of file compiled\&.php\&.
.SS "duplicate (array $query = \fCnull\fP, array $request = \fCnull\fP, array $attributes = \fCnull\fP, array $cookies = \fCnull\fP, array $files = \fCnull\fP, array $server = \fCnull\fP)"
Clones a request and overrides some of its parameters\&.
.PP
\fBParameters:\fP
.RS 4
\fI$query\fP The GET parameters 
.br
\fI$request\fP The POST parameters 
.br
\fI$attributes\fP The request attributes (parameters parsed from the PATH_INFO, \&.\&.\&.) 
.br
\fI$cookies\fP The COOKIE parameters 
.br
\fI$files\fP The FILES parameters 
.br
\fI$server\fP The SERVER parameters
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRequest\fP The duplicated request
.RE
.PP

.PP
Definition at line 445 of file Request\&.php\&.
.SS "duplicate (array $query = \fCnull\fP, array $request = \fCnull\fP, array $attributes = \fCnull\fP, array $cookies = \fCnull\fP, array $files = \fCnull\fP, array $server = \fCnull\fP)"

.PP
Definition at line 2686 of file compiled\&.php\&.
.SS "static enableHttpMethodParameterOverride ()\fC [static]\fP"
Enables support for the _method request parameter to determine the intended HTTP method\&.
.PP
Be warned that enabling this feature might lead to CSRF issues in your code\&. Check that you are using CSRF tokens when required\&. If the HTTP method parameter override is enabled, an html-form with method 'POST' can be altered and used to send a 'PUT' or 'DELETE' request via the _method request parameter\&. If these methods are not protected against CSRF, this presents a possible vulnerability\&.
.PP
The HTTP method can only be overridden when the real HTTP method is POST\&. 
.PP
Definition at line 704 of file Request\&.php\&.
.SS "static enableHttpMethodParameterOverride ()\fC [static]\fP"

.PP
Definition at line 2816 of file compiled\&.php\&.
.SS "get ( $key,  $default = \fCnull\fP,  $deep = \fCfalse\fP)"
Gets a 'parameter' value\&.
.PP
This method is mainly useful for libraries that want to provide some flexibility\&.
.PP
Order of precedence: GET, PATH, POST
.PP
Avoid using this method in controllers:
.PP
.IP "\(bu" 2
slow
.IP "\(bu" 2
prefer to get from a 'named' source
.PP
.PP
It is better to explicitly get request parameters from the appropriate public property instead (query, attributes, request)\&.
.PP
\fBParameters:\fP
.RS 4
\fI$key\fP the key 
.br
\fI$default\fP the default value 
.br
\fI$deep\fP is parameter deep in multidimensional array
.RE
.PP
\fBReturns:\fP
.RS 4
mixed 
.RE
.PP

.PP
Definition at line 740 of file Request\&.php\&.
.SS "get ( $key,  $default = \fCnull\fP,  $deep = \fCfalse\fP)"

.PP
Definition at line 2824 of file compiled\&.php\&.
.SS "getAcceptableContentTypes ()"
Gets a list of content types acceptable by the client browser\&.
.PP
\fBReturns:\fP
.RS 4
array List of content types in preferable order
.RE
.PP

.PP
Definition at line 1647 of file Request\&.php\&.
.SS "getAcceptableContentTypes ()"

.PP
Definition at line 3200 of file compiled\&.php\&.
.SS "getBasePath ()"
Returns the root path from which this request is executed\&.
.PP
Suppose that an \fBindex\&.php\fP file instantiates this request object:
.PP
.IP "\(bu" 2
http://localhost/index.php returns an empty string
.IP "\(bu" 2
http://localhost/index.php/page returns an empty string
.IP "\(bu" 2
http://localhost/web/index.php returns '/web'
.IP "\(bu" 2
http://localhost/we%20b/index.php returns '/we%20b'
.PP
.PP
\fBReturns:\fP
.RS 4
string The raw path (i\&.e\&. not urldecoded)
.RE
.PP

.PP
Definition at line 935 of file Request\&.php\&.
.SS "getBasePath ()"

.PP
Definition at line 2891 of file compiled\&.php\&.
.SS "getBaseUrl ()"
Returns the root \fBURL\fP from which this request is executed\&.
.PP
The base \fBURL\fP never ends with a /\&.
.PP
This is similar to \fBgetBasePath()\fP, except that it also includes the script filename (e\&.g\&. \fBindex\&.php\fP) if one exists\&.
.PP
\fBReturns:\fP
.RS 4
string The raw \fBURL\fP (i\&.e\&. not urldecoded)
.RE
.PP

.PP
Definition at line 956 of file Request\&.php\&.
.SS "getBaseUrl ()"

.PP
Definition at line 2898 of file compiled\&.php\&.
.SS "getCharsets ()"
Gets a list of charsets acceptable by the client browser\&.
.PP
\fBReturns:\fP
.RS 4
array List of charsets in preferable order
.RE
.PP

.PP
Definition at line 1617 of file Request\&.php\&.
.SS "getCharsets ()"

.PP
Definition at line 3186 of file compiled\&.php\&.
.SS "getClientIp ()"
Returns the client IP address\&.
.PP
This method can read the client IP address from the 'X-Forwarded-For' header when trusted proxies were set via 'setTrustedProxies()'\&. The 'X-Forwarded-For' header value is a comma+space separated list of IP addresses, the left-most being the original client, and each successive proxy that passed the request adding the IP address where it received the request from\&.
.PP
If your reverse proxy uses a different header name than 'X-Forwarded-For', ('Client-Ip' for instance), configure it via 'setTrustedHeaderName()' with the 'client-ip' key\&.
.PP
\fBReturns:\fP
.RS 4
string The client IP address
.RE
.PP
\fBSee also:\fP
.RS 4
\fBgetClientIps()\fP 
.PP
http://en.wikipedia.org/wiki/X-Forwarded-For
.RE
.PP

.PP
Definition at line 877 of file Request\&.php\&.
.SS "getClientIp ()"

.PP
Definition at line 2875 of file compiled\&.php\&.
.SS "getClientIps ()"
Returns the client IP addresses\&.
.PP
In the returned array the most trusted IP address is first, and the least trusted one last\&. The 'real' client IP address is the last one, but this is also the least trusted one\&. Trusted proxies are stripped\&.
.PP
Use this method carefully; you should use \fBgetClientIp()\fP instead\&.
.PP
\fBReturns:\fP
.RS 4
array The client IP addresses
.RE
.PP
\fBSee also:\fP
.RS 4
\fBgetClientIp()\fP 
.RE
.PP

.PP
Definition at line 824 of file Request\&.php\&.
.SS "getClientIps ()"

.PP
Definition at line 2853 of file compiled\&.php\&.
.SS "getContent ( $asResource = \fCfalse\fP)"
Returns the request body content\&.
.PP
\fBParameters:\fP
.RS 4
\fI$asResource\fP If true, a resource will be returned
.RE
.PP
\fBReturns:\fP
.RS 4
string|resource The request body content or a resource to read the body stream\&.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fP .RE
.PP

.PP
Definition at line 1494 of file Request\&.php\&.
.SS "getContent ( $asResource = \fCfalse\fP)"

.PP
Definition at line 3114 of file compiled\&.php\&.
.SS "getContentType ()"
Gets the format associated with the request\&.
.PP
\fBReturns:\fP
.RS 4
string|null The format (null if no content type is present)
.RE
.PP

.PP
Definition at line 1408 of file Request\&.php\&.
.SS "getContentType ()"

.PP
Definition at line 3083 of file compiled\&.php\&.
.SS "getDefaultLocale ()"
Get the default locale\&.
.PP
\fBReturns:\fP
.RS 4
string 
.RE
.PP

.PP
Definition at line 1434 of file Request\&.php\&.
.SS "getDefaultLocale ()"

.PP
Definition at line 3094 of file compiled\&.php\&.
.SS "getEncodings ()"
Gets a list of encodings acceptable by the client browser\&.
.PP
\fBReturns:\fP
.RS 4
array List of encodings in preferable order 
.RE
.PP

.PP
Definition at line 1631 of file Request\&.php\&.
.SS "getEncodings ()"

.PP
Definition at line 3193 of file compiled\&.php\&.
.SS "getETags ()"
Gets the Etags\&.
.PP
\fBReturns:\fP
.RS 4
array The entity tags 
.RE
.PP

.PP
Definition at line 1518 of file Request\&.php\&.
.SS "getETags ()"

.PP
Definition at line 3128 of file compiled\&.php\&.
.SS "getFormat ( $mimeType)"
Gets the format associated with the mime type\&.
.PP
\fBParameters:\fP
.RS 4
\fI$mimeType\fP The associated mime type
.RE
.PP
\fBReturns:\fP
.RS 4
string|null The format (null if not found)
.RE
.PP

.PP
Definition at line 1331 of file Request\&.php\&.
.SS "getFormat ( $mimeType)"

.PP
Definition at line 3051 of file compiled\&.php\&.
.SS "getHost ()"
Returns the host name\&.
.PP
This method can read the client port from the 'X-Forwarded-Host' header when trusted proxies were set via 'setTrustedProxies()'\&.
.PP
The 'X-Forwarded-Host' header must contain the client host name\&.
.PP
If your reverse proxy uses a different header name than 'X-Forwarded-Host', configure it via 'setTrustedHeaderName()' with the 'client-host' key\&.
.PP
\fBReturns:\fP
.RS 4
string
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fP .RE
.PP

.PP
Definition at line 1201 of file Request\&.php\&.
.SS "getHost ()"

.PP
Definition at line 2993 of file compiled\&.php\&.
.SS "getHttpHost ()"
Returns the HTTP host being requested\&.
.PP
The port name will be appended to the host if it's non-standard\&.
.PP
\fBReturns:\fP
.RS 4
string
.RE
.PP

.PP
Definition at line 1067 of file Request\&.php\&.
.SS "getHttpHost ()"

.PP
Definition at line 2949 of file compiled\&.php\&.
.SS "static getHttpMethodParameterOverride ()\fC [static]\fP"
Checks whether support for the _method request parameter is enabled\&.
.PP
\fBReturns:\fP
.RS 4
bool True when the _method request parameter is enabled, false otherwise 
.RE
.PP

.PP
Definition at line 714 of file Request\&.php\&.
.SS "static getHttpMethodParameterOverride ()\fC [static]\fP"

.PP
Definition at line 2820 of file compiled\&.php\&.
.SS "getLanguages ()"
Gets a list of languages acceptable by the client browser\&.
.PP
\fBReturns:\fP
.RS 4
array Languages ordered in the user browser preferences
.RE
.PP

.PP
Definition at line 1575 of file Request\&.php\&.
.SS "getLanguages ()"

.PP
Definition at line 3158 of file compiled\&.php\&.
.SS "getLocale ()"
Get the locale\&.
.PP
\fBReturns:\fP
.RS 4
string 
.RE
.PP

.PP
Definition at line 1456 of file Request\&.php\&.
.SS "getLocale ()"

.PP
Definition at line 3102 of file compiled\&.php\&.
.SS "getMethod ()"
Gets the request 'intended' method\&.
.PP
If the X-HTTP-Method-Override header is set, and if the method is a POST, then it is used to determine the 'real' intended HTTP method\&.
.PP
The _method request parameter can also be used to determine the HTTP method, but only if \fBenableHttpMethodParameterOverride()\fP has been called\&.
.PP
The method is always an uppercased string\&.
.PP
\fBReturns:\fP
.RS 4
string The request method
.RE
.PP
.PP
\fBSee also:\fP
.RS 4
\fBgetRealMethod()\fP 
.RE
.PP

.PP
Definition at line 1275 of file Request\&.php\&.
.SS "getMethod ()"

.PP
Definition at line 3026 of file compiled\&.php\&.
.SS "getMimeType ( $format)"
Gets the mime type associated with the format\&.
.PP
\fBParameters:\fP
.RS 4
\fI$format\fP The format
.RE
.PP
\fBReturns:\fP
.RS 4
string The associated mime type (null if not found)
.RE
.PP

.PP
Definition at line 1313 of file Request\&.php\&.
.SS "getMimeType ( $format)"

.PP
Definition at line 3044 of file compiled\&.php\&.
.SS "getPassword ()"
Returns the password\&.
.PP
\fBReturns:\fP
.RS 4
string|null 
.RE
.PP

.PP
Definition at line 1036 of file Request\&.php\&.
.SS "getPassword ()"

.PP
Definition at line 2936 of file compiled\&.php\&.
.SS "getPathInfo ()"
Returns the path being requested relative to the executed script\&.
.PP
The path info always starts with a /\&.
.PP
Suppose this request is instantiated from /mysite on localhost:
.PP
.IP "\(bu" 2
http://localhost/mysite returns an empty string
.IP "\(bu" 2
http://localhost/mysite/about returns '/about'
.IP "\(bu" 2
http://localhost/mysite/enco%20ded returns '/enco%20ded'
.IP "\(bu" 2
http://localhost/mysite/about?var=1 returns '/about'
.PP
.PP
\fBReturns:\fP
.RS 4
string The raw path (i\&.e\&. not urldecoded)
.RE
.PP

.PP
Definition at line 912 of file Request\&.php\&.
.SS "getPathInfo ()"

.PP
Definition at line 2884 of file compiled\&.php\&.
.SS "getPort ()"
Returns the port on which the request is made\&.
.PP
This method can read the client port from the 'X-Forwarded-Port' header when trusted proxies were set via 'setTrustedProxies()'\&.
.PP
The 'X-Forwarded-Port' header must contain the client port\&.
.PP
If your reverse proxy uses a different header name than 'X-Forwarded-Port', configure it via 'setTrustedHeaderName()' with the 'client-port' key\&.
.PP
\fBReturns:\fP
.RS 4
string
.RE
.PP

.PP
Definition at line 992 of file Request\&.php\&.
.SS "getPort ()"

.PP
Definition at line 2909 of file compiled\&.php\&.
.SS "getPreferredLanguage (array $locales = \fCnull\fP)"
Returns the preferred language\&.
.PP
\fBParameters:\fP
.RS 4
\fI$locales\fP An array of ordered available locales
.RE
.PP
\fBReturns:\fP
.RS 4
string|null The preferred locale
.RE
.PP

.PP
Definition at line 1540 of file Request\&.php\&.
.SS "getPreferredLanguage (array $locales = \fCnull\fP)"

.PP
Definition at line 3136 of file compiled\&.php\&.
.SS "getQueryString ()"
Generates the normalized query string for the \fBRequest\fP\&.
.PP
It builds a normalized query string, where keys/value pairs are alphabetized and have consistent escaping\&.
.PP
\fBReturns:\fP
.RS 4
string|null \fBA\fP normalized query string for the \fBRequest\fP
.RE
.PP

.PP
Definition at line 1150 of file Request\&.php\&.
.SS "getQueryString ()"

.PP
Definition at line 2980 of file compiled\&.php\&.
.SS "getRealMethod ()"
Gets the 'real' request method\&.
.PP
\fBReturns:\fP
.RS 4
string The request method
.RE
.PP
\fBSee also:\fP
.RS 4
\fBgetMethod()\fP 
.RE
.PP

.PP
Definition at line 1299 of file Request\&.php\&.
.SS "getRealMethod ()"

.PP
Definition at line 3040 of file compiled\&.php\&.
.SS "getRequestFormat ( $default = \fC'\fBhtml\fP'\fP)"
Gets the request format\&.
.PP
Here is the process to determine the format:
.PP
.IP "\(bu" 2
format defined by the user (with \fBsetRequestFormat()\fP)
.IP "\(bu" 2
_format request parameter
.IP "\(bu" 2
$default
.PP
.PP
\fBParameters:\fP
.RS 4
\fI$default\fP The default format
.RE
.PP
\fBReturns:\fP
.RS 4
string The request format
.RE
.PP

.PP
Definition at line 1380 of file Request\&.php\&.
.SS "getRequestFormat ( $default = \fC'\fBhtml\fP'\fP)"

.PP
Definition at line 3072 of file compiled\&.php\&.
.SS "getRequestUri ()"
Returns the requested URI (path and query string)\&.
.PP
\fBReturns:\fP
.RS 4
string The raw URI (i\&.e\&. not URI decoded)
.RE
.PP

.PP
Definition at line 1086 of file Request\&.php\&.
.SS "getRequestUri ()"

.PP
Definition at line 2958 of file compiled\&.php\&.
.SS "getScheme ()"
Gets the request's scheme\&.
.PP
\fBReturns:\fP
.RS 4
string
.RE
.PP

.PP
Definition at line 972 of file Request\&.php\&.
.SS "getScheme ()"

.PP
Definition at line 2905 of file compiled\&.php\&.
.SS "getSchemeAndHttpHost ()"
Gets the scheme and HTTP host\&.
.PP
If the \fBURL\fP was called with basic authentication, the user and the password are not added to the generated string\&.
.PP
\fBReturns:\fP
.RS 4
string The scheme and HTTP host 
.RE
.PP

.PP
Definition at line 1103 of file Request\&.php\&.
.SS "getSchemeAndHttpHost ()"

.PP
Definition at line 2965 of file compiled\&.php\&.
.SS "getScriptName ()"
Returns current script name\&.
.PP
\fBReturns:\fP
.RS 4
string
.RE
.PP

.PP
Definition at line 891 of file Request\&.php\&.
.SS "getScriptName ()"

.PP
Definition at line 2880 of file compiled\&.php\&.
.SS "getSession ()"
Gets the \fBSession\fP\&.
.PP
\fBReturns:\fP
.RS 4
SessionInterface|null The session
.RE
.PP

.PP
Definition at line 764 of file Request\&.php\&.
.SS "getSession ()"

.PP
Definition at line 2837 of file compiled\&.php\&.
.SS "static getTrustedHeaderName ( $key)\fC [static]\fP"
Gets the trusted proxy header name\&.
.PP
\fBParameters:\fP
.RS 4
\fI$key\fP The header key
.RE
.PP
\fBReturns:\fP
.RS 4
string The header name
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fP .RE
.PP

.PP
Definition at line 641 of file Request\&.php\&.
.SS "static getTrustedHeaderName ( $key)\fC [static]\fP"

.PP
Definition at line 2791 of file compiled\&.php\&.
.SS "static getTrustedHosts ()\fC [static]\fP"
Gets the list of trusted host patterns\&.
.PP
\fBReturns:\fP
.RS 4
array An array of trusted host patterns\&. 
.RE
.PP

.PP
Definition at line 601 of file Request\&.php\&.
.SS "static getTrustedHosts ()\fC [static]\fP"

.PP
Definition at line 2780 of file compiled\&.php\&.
.SS "static getTrustedProxies ()\fC [static]\fP"
Gets the list of trusted proxies\&.
.PP
\fBReturns:\fP
.RS 4
array An array of trusted proxies\&. 
.RE
.PP

.PP
Definition at line 575 of file Request\&.php\&.
.SS "static getTrustedProxies ()\fC [static]\fP"

.PP
Definition at line 2769 of file compiled\&.php\&.
.SS "getUri ()"
Generates a normalized URI (\fBURL\fP) for the \fBRequest\fP\&.
.PP
\fBReturns:\fP
.RS 4
string \fBA\fP normalized URI (\fBURL\fP) for the \fBRequest\fP
.RE
.PP
\fBSee also:\fP
.RS 4
\fBgetQueryString()\fP
.RE
.PP

.PP
Definition at line 1117 of file Request\&.php\&.
.SS "getUri ()"

.PP
Definition at line 2969 of file compiled\&.php\&.
.SS "getUriForPath ( $path)"
Generates a normalized URI for the given path\&.
.PP
\fBParameters:\fP
.RS 4
\fI$path\fP \fBA\fP path to use instead of the current one
.RE
.PP
\fBReturns:\fP
.RS 4
string The normalized URI for the path
.RE
.PP

.PP
Definition at line 1135 of file Request\&.php\&.
.SS "getUriForPath ( $path)"

.PP
Definition at line 2976 of file compiled\&.php\&.
.SS "getUser ()"
Returns the user\&.
.PP
\fBReturns:\fP
.RS 4
string|null 
.RE
.PP

.PP
Definition at line 1026 of file Request\&.php\&.
.SS "getUser ()"

.PP
Definition at line 2932 of file compiled\&.php\&.
.SS "getUserInfo ()"
Gets the user info\&.
.PP
\fBReturns:\fP
.RS 4
string \fBA\fP user name and, optionally, scheme-specific information about how to gain authorization to access the server 
.RE
.PP

.PP
Definition at line 1046 of file Request\&.php\&.
.SS "getUserInfo ()"

.PP
Definition at line 2940 of file compiled\&.php\&.
.SS "hasPreviousSession ()"
Whether the request contains a \fBSession\fP which was started in one of the previous requests\&.
.PP
\fBReturns:\fP
.RS 4
bool
.RE
.PP

.PP
Definition at line 777 of file Request\&.php\&.
.SS "hasPreviousSession ()"

.PP
Definition at line 2841 of file compiled\&.php\&.
.SS "hasSession ()"
Whether the request contains a \fBSession\fP object\&.
.PP
This method does not give any information about the state of the session object, like whether the session is started or not\&. It is just a way to check if this \fBRequest\fP is associated with a \fBSession\fP instance\&.
.PP
\fBReturns:\fP
.RS 4
bool true when the \fBRequest\fP contains a \fBSession\fP object, false otherwise
.RE
.PP

.PP
Definition at line 794 of file Request\&.php\&.
.SS "hasSession ()"

.PP
Definition at line 2845 of file compiled\&.php\&.
.SS "initialize (array $query = \fCarray()\fP, array $request = \fCarray()\fP, array $attributes = \fCarray()\fP, array $cookies = \fCarray()\fP, array $files = \fCarray()\fP, array $server = \fCarray()\fP,  $content = \fCnull\fP)"
Sets the parameters for this request\&.
.PP
This method also re-initializes all properties\&.
.PP
\fBParameters:\fP
.RS 4
\fI$query\fP The GET parameters 
.br
\fI$request\fP The POST parameters 
.br
\fI$attributes\fP The request attributes (parameters parsed from the PATH_INFO, \&.\&.\&.) 
.br
\fI$cookies\fP The COOKIE parameters 
.br
\fI$files\fP The FILES parameters 
.br
\fI$server\fP The SERVER parameters 
.br
\fI$content\fP The raw body data
.RE
.PP

.PP
Definition at line 250 of file Request\&.php\&.
.SS "initialize (array $query = \fCarray()\fP, array $request = \fCarray()\fP, array $attributes = \fCarray()\fP, array $cookies = \fCarray()\fP, array $files = \fCarray()\fP, array $server = \fCarray()\fP,  $content = \fCnull\fP)"

.PP
Definition at line 2578 of file compiled\&.php\&.
.SS "static initializeFormats ()\fC [static]\fP, \fC [protected]\fP"
Initializes HTTP request formats\&. 
.PP
Definition at line 1848 of file Request\&.php\&.
.SS "static initializeFormats ()\fC [static]\fP, \fC [protected]\fP"

.PP
Definition at line 3320 of file compiled\&.php\&.
.SS "isMethod ( $method)"
Checks if the request method is of specified type\&.
.PP
\fBParameters:\fP
.RS 4
\fI$method\fP Uppercase request method (GET, POST etc)\&.
.RE
.PP
\fBReturns:\fP
.RS 4
bool 
.RE
.PP

.PP
Definition at line 1468 of file Request\&.php\&.
.SS "isMethod ( $method)"

.PP
Definition at line 3106 of file compiled\&.php\&.
.SS "isMethodSafe ()"
Checks whether the method is safe or not\&.
.PP
\fBReturns:\fP
.RS 4
bool
.RE
.PP

.PP
Definition at line 1480 of file Request\&.php\&.
.SS "isMethodSafe ()"

.PP
Definition at line 3110 of file compiled\&.php\&.
.SS "isNoCache ()"

.PP
\fBReturns:\fP
.RS 4
bool 
.RE
.PP

.PP
Definition at line 1526 of file Request\&.php\&.
.SS "isNoCache ()"

.PP
Definition at line 3132 of file compiled\&.php\&.
.SS "isSecure ()"
Checks whether the request is secure or not\&.
.PP
This method can read the client port from the 'X-Forwarded-Proto' header when trusted proxies were set via 'setTrustedProxies()'\&.
.PP
The 'X-Forwarded-Proto' header must contain the protocol: 'https' or 'http'\&.
.PP
If your reverse proxy uses a different header name than 'X-Forwarded-Proto' ('SSL_HTTPS' for instance), configure it via 'setTrustedHeaderName()' with the 'client-proto' key\&.
.PP
\fBReturns:\fP
.RS 4
bool
.RE
.PP

.PP
Definition at line 1173 of file Request\&.php\&.
.SS "isSecure ()"

.PP
Definition at line 2985 of file compiled\&.php\&.
.SS "isXmlHttpRequest ()"
Returns true if the request is a XMLHttpRequest\&.
.PP
It works if your JavaScript library sets an X-Requested-With HTTP header\&. It is known to work with common JavaScript frameworks:
.PP
\fBbool true if the request is an XMLHttpRequest, false otherwise  \fP
.PP
Definition at line 1668 of file Request\&.php\&.
.SS "isXmlHttpRequest ()"

.PP
Definition at line 3207 of file compiled\&.php\&.
.SS "static normalizeQueryString ( $qs)\fC [static]\fP"
Normalizes a query string\&.
.PP
It builds a normalized query string, where keys/value pairs are alphabetized, have consistent escaping and unneeded delimiters are removed\&.
.PP
\fBParameters:\fP
.RS 4
\fI$qs\fP Query string
.RE
.PP
\fBReturns:\fP
.RS 4
string \fBA\fP normalized query string for the \fBRequest\fP 
.RE
.PP

.PP
Definition at line 660 of file Request\&.php\&.
.SS "static normalizeQueryString ( $qs)\fC [static]\fP"

.PP
Definition at line 2798 of file compiled\&.php\&.
.SS "overrideGlobals ()"
Overrides the \fBPHP\fP global variables according to this request instance\&.
.PP
It overrides $_GET, $_POST, $_REQUEST, $_SERVER, $_COOKIE\&. $_FILES is never overridden, see rfc1867
.PP
Definition at line 527 of file Request\&.php\&.
.SS "overrideGlobals ()"

.PP
Definition at line 2742 of file compiled\&.php\&.
.SS "prepareBasePath ()\fC [protected]\fP"
Prepares the base path\&.
.PP
\fBReturns:\fP
.RS 4
string base path 
.RE
.PP

.PP
Definition at line 1794 of file Request\&.php\&.
.SS "prepareBasePath ()\fC [protected]\fP"

.PP
Definition at line 3286 of file compiled\&.php\&.
.SS "prepareBaseUrl ()\fC [protected]\fP"
Prepares the base \fBURL\fP\&.
.PP
\fBReturns:\fP
.RS 4
string 
.RE
.PP

.PP
Definition at line 1728 of file Request\&.php\&.
.SS "prepareBaseUrl ()\fC [protected]\fP"

.PP
Definition at line 3243 of file compiled\&.php\&.
.SS "preparePathInfo ()\fC [protected]\fP"
Prepares the path info\&.
.PP
\fBReturns:\fP
.RS 4
string path info 
.RE
.PP

.PP
Definition at line 1820 of file Request\&.php\&.
.SS "preparePathInfo ()\fC [protected]\fP"

.PP
Definition at line 3303 of file compiled\&.php\&.
.SS "prepareRequestUri ()\fC [protected]\fP"

.PP
Definition at line 1681 of file Request\&.php\&.
.SS "prepareRequestUri ()\fC [protected]\fP"

.PP
Definition at line 3211 of file compiled\&.php\&.
.SS "setDefaultLocale ( $locale)"
Sets the default locale\&.
.PP
\fBParameters:\fP
.RS 4
\fI$locale\fP 
.RE
.PP

.PP
Definition at line 1420 of file Request\&.php\&.
.SS "setDefaultLocale ( $locale)"

.PP
Definition at line 3087 of file compiled\&.php\&.
.SS "static setFactory ( $callable)\fC [static]\fP"
Sets a callable able to create a \fBRequest\fP instance\&.
.PP
This is mainly useful when you need to override the \fBRequest\fP class to keep BC with an existing system\&. It should not be used for any other purpose\&.
.PP
\fBParameters:\fP
.RS 4
\fI$callable\fP \fBA\fP \fBPHP\fP callable 
.RE
.PP

.PP
Definition at line 426 of file Request\&.php\&.
.SS "static setFactory ( $callable)\fC [static]\fP"

.PP
Definition at line 2682 of file compiled\&.php\&.
.SS "setFormat ( $format,  $mimeTypes)"
Associates a format with mime types\&.
.PP
\fBParameters:\fP
.RS 4
\fI$format\fP The format 
.br
\fI$mimeTypes\fP The associated mime types (the preferred one must be the first as it will be used as the content type)
.RE
.PP

.PP
Definition at line 1356 of file Request\&.php\&.
.SS "setFormat ( $format,  $mimeTypes)"

.PP
Definition at line 3065 of file compiled\&.php\&.
.SS "setLocale ( $locale)"
Sets the locale\&.
.PP
\fBParameters:\fP
.RS 4
\fI$locale\fP 
.RE
.PP

.PP
Definition at line 1446 of file Request\&.php\&.
.SS "setLocale ( $locale)"

.PP
Definition at line 3098 of file compiled\&.php\&.
.SS "setMethod ( $method)"
Sets the request method\&.
.PP
\fBParameters:\fP
.RS 4
\fI$method\fP 
.RE
.PP

.PP
Definition at line 1252 of file Request\&.php\&.
.SS "setMethod ( $method)"

.PP
Definition at line 3021 of file compiled\&.php\&.
.SS "setRequestFormat ( $format)"
Sets the request format\&.
.PP
\fBParameters:\fP
.RS 4
\fI$format\fP The request format\&.
.RE
.PP

.PP
Definition at line 1396 of file Request\&.php\&.
.SS "setRequestFormat ( $format)"

.PP
Definition at line 3079 of file compiled\&.php\&.
.SS "setSession (\fBSessionInterface\fP $session)"
Sets the \fBSession\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fI$session\fP The \fBSession\fP
.RE
.PP

.PP
Definition at line 806 of file Request\&.php\&.
.SS "setSession (\fBSessionInterface\fP $session)"

.PP
Definition at line 2849 of file compiled\&.php\&.
.SS "static setTrustedHeaderName ( $key,  $value)\fC [static]\fP"
Sets the name for trusted headers\&.
.PP
The following header keys are supported:
.PP
.IP "\(bu" 2
\fBRequest::HEADER_CLIENT_IP\fP: defaults to X-Forwarded-For (see \fBgetClientIp()\fP)
.IP "\(bu" 2
\fBRequest::HEADER_CLIENT_HOST\fP: defaults to X-Forwarded-Host (see \fBgetHost()\fP)
.IP "\(bu" 2
\fBRequest::HEADER_CLIENT_PORT\fP: defaults to X-Forwarded-Port (see \fBgetPort()\fP)
.IP "\(bu" 2
\fBRequest::HEADER_CLIENT_PROTO\fP: defaults to X-Forwarded-Proto (see \fBgetScheme()\fP and \fBisSecure()\fP)
.PP
.PP
Setting an empty value allows to disable the trusted header for the given key\&.
.PP
\fBParameters:\fP
.RS 4
\fI$key\fP The header key 
.br
\fI$value\fP The header name
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fP .RE
.PP

.PP
Definition at line 623 of file Request\&.php\&.
.SS "static setTrustedHeaderName ( $key,  $value)\fC [static]\fP"

.PP
Definition at line 2784 of file compiled\&.php\&.
.SS "static setTrustedHosts (array $hostPatterns)\fC [static]\fP"
Sets a list of trusted host patterns\&.
.PP
You should only list the hosts you manage using regexs\&.
.PP
\fBParameters:\fP
.RS 4
\fI$hostPatterns\fP \fBA\fP list of trusted host patterns 
.RE
.PP

.PP
Definition at line 587 of file Request\&.php\&.
.SS "static setTrustedHosts (array $hostPatterns)\fC [static]\fP"

.PP
Definition at line 2773 of file compiled\&.php\&.
.SS "static setTrustedProxies (array $proxies)\fC [static]\fP"
Sets a list of trusted proxies\&.
.PP
You should only list the reverse proxies that you manage directly\&.
.PP
\fBParameters:\fP
.RS 4
\fI$proxies\fP \fBA\fP list of trusted proxies
.RE
.PP

.PP
Definition at line 565 of file Request\&.php\&.
.SS "static setTrustedProxies (array $proxies)\fC [static]\fP"

.PP
Definition at line 2765 of file compiled\&.php\&.
.SH "Field Documentation"
.PP 
.SS "$acceptableContentTypes\fC [protected]\fP"

.PP
Definition at line 2562 of file compiled\&.php\&.
.SS "$attributes"

.PP
Definition at line 2551 of file compiled\&.php\&.
.SS "$basePath\fC [protected]\fP"

.PP
Definition at line 2566 of file compiled\&.php\&.
.SS "$baseUrl\fC [protected]\fP"

.PP
Definition at line 2565 of file compiled\&.php\&.
.SS "$charsets\fC [protected]\fP"

.PP
Definition at line 2560 of file compiled\&.php\&.
.SS "$content\fC [protected]\fP"

.PP
Definition at line 2558 of file compiled\&.php\&.
.SS "$cookies"

.PP
Definition at line 2556 of file compiled\&.php\&.
.SS "$defaultLocale = 'en'\fC [protected]\fP"

.PP
Definition at line 2571 of file compiled\&.php\&.
.SS "$encodings\fC [protected]\fP"

.PP
Definition at line 2561 of file compiled\&.php\&.
.SS "$files"

.PP
Definition at line 2555 of file compiled\&.php\&.
.SS "$\fBformat\fP\fC [protected]\fP"

.PP
Definition at line 2568 of file compiled\&.php\&.
.SS "static $formats\fC [static]\fP, \fC [protected]\fP"

.PP
Definition at line 2572 of file compiled\&.php\&.
.SS "$headers"

.PP
Definition at line 2557 of file compiled\&.php\&.
.SS "static $httpMethodParameterOverride = false\fC [static]\fP, \fC [protected]\fP"

.PP
Definition at line 2550 of file compiled\&.php\&.
.SS "$languages\fC [protected]\fP"

.PP
Definition at line 2559 of file compiled\&.php\&.
.SS "$\fBlocale\fP\fC [protected]\fP"

.PP
Definition at line 2570 of file compiled\&.php\&.
.SS "$method\fC [protected]\fP"

.PP
Definition at line 2567 of file compiled\&.php\&.
.SS "$pathInfo\fC [protected]\fP"

.PP
Definition at line 2563 of file compiled\&.php\&.
.SS "$query"

.PP
Definition at line 2553 of file compiled\&.php\&.
.SS "$request"

.PP
Definition at line 2552 of file compiled\&.php\&.
.SS "static $requestFactory\fC [static]\fP, \fC [protected]\fP"

.PP
Definition at line 2573 of file compiled\&.php\&.
.SS "$requestUri\fC [protected]\fP"

.PP
Definition at line 2564 of file compiled\&.php\&.
.SS "$server"

.PP
Definition at line 2554 of file compiled\&.php\&.
.SS "$session\fC [protected]\fP"

.PP
Definition at line 2569 of file compiled\&.php\&.
.SS "static $trustedHeaders = array(self::HEADER_CLIENT_IP => 'X_FORWARDED_FOR', self::HEADER_CLIENT_HOST => 'X_FORWARDED_HOST', self::HEADER_CLIENT_PROTO => 'X_FORWARDED_PROTO', self::HEADER_CLIENT_PORT => 'X_FORWARDED_PORT')\fC [static]\fP, \fC [protected]\fP"
Names for headers that can be trusted when using trusted proxies\&.
.PP
The default names are non-standard, but widely used by popular reverse proxies (like Apache mod_proxy or Amazon EC2)\&. 
.PP
Definition at line 2549 of file compiled\&.php\&.
.SS "static $trustedHostPatterns = array()\fC [static]\fP, \fC [protected]\fP"

.PP
Definition at line 2547 of file compiled\&.php\&.
.SS "static $trustedHosts = array()\fC [static]\fP, \fC [protected]\fP"

.PP
Definition at line 2548 of file compiled\&.php\&.
.SS "static $trustedProxies = array()\fC [static]\fP, \fC [protected]\fP"

.PP
Definition at line 2546 of file compiled\&.php\&.
.SS "const HEADER_CLIENT_HOST = 'client_host'"

.PP
Definition at line 2533 of file compiled\&.php\&.
.SS "const HEADER_CLIENT_IP = 'client_ip'"

.PP
Definition at line 2532 of file compiled\&.php\&.
.SS "const HEADER_CLIENT_PORT = 'client_port'"

.PP
Definition at line 2535 of file compiled\&.php\&.
.SS "const HEADER_CLIENT_PROTO = 'client_proto'"

.PP
Definition at line 2534 of file compiled\&.php\&.
.SS "const METHOD_CONNECT = 'CONNECT'"

.PP
Definition at line 2545 of file compiled\&.php\&.
.SS "const METHOD_DELETE = 'DELETE'"

.PP
Definition at line 2541 of file compiled\&.php\&.
.SS "const METHOD_GET = 'GET'"

.PP
Definition at line 2537 of file compiled\&.php\&.
.SS "const METHOD_HEAD = 'HEAD'"

.PP
Definition at line 2536 of file compiled\&.php\&.
.SS "const METHOD_OPTIONS = 'OPTIONS'"

.PP
Definition at line 2543 of file compiled\&.php\&.
.SS "const METHOD_PATCH = 'PATCH'"

.PP
Definition at line 2540 of file compiled\&.php\&.
.SS "const METHOD_POST = 'POST'"

.PP
Definition at line 2538 of file compiled\&.php\&.
.SS "const METHOD_PURGE = 'PURGE'"

.PP
Definition at line 2542 of file compiled\&.php\&.
.SS "const METHOD_PUT = 'PUT'"

.PP
Definition at line 2539 of file compiled\&.php\&.
.SS "const METHOD_TRACE = 'TRACE'"

.PP
Definition at line 2544 of file compiled\&.php\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for VirtualSCADA from the source code\&.
